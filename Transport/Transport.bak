= V4 Outline MultiLine NoSorting TabWidth=30

H="transportation to dr"
/*HRS variables are processed in file HRS_Processing.txt
1998-2012 Core interviews
2002-2012 Exit interviews
Restricted data received in March 2015

Note elixhauser comorbidities diagnosis lists are modified for the 
purposes of this project, do not copy and paste this Elixhauser code 
for use in other projects!!

******************************************************************

/*nhats cleaned path*/
libname nhats 'E:\nhats\data\NHATS cleaned';

/*medicare xwalk and claims path*/
libname medi 'E:\nhats\data\cms_DUA_28016\merged';

/*project data paths*/
libname proj_int 'E:\nhats\data\Projects\Transport to Dr\data';



H="get index date"
/*Import NHATS Cleaned Dataset for Rounds 1-4*/
proc import datafile="E:\nhats\data\NHATS cleaned\sp_round_1_4.dta" out=proj_int.nhats replace; run;


data index1;
set proj_int.nhats (keep=spid ivw_date ivw_month ivw_year);
index_date=ivw_date;
index_month=ivw_month;
index_year=ivw_year;
run;

proc import out=xwalka
	    datafile = "E:\nhats\data\CMS_DUA_28016\Kelley_crosswalk_NHATS_old.dta" replace;
run;

data xwalkb;
set medi.nhats2bene_xwalk_11;
run;

proc sql;
create table xwalk as select * from
xwalka a inner join 
xwalkb b
on a.nhats_cms_num=b.nhats_cms_num;
quit;
 
proc sql;
create table index as select a.spid, a.ivw_date as index_date, a.ivw_month as index_month, a.ivw_year as index_year, b.bene_id
from index1 a left join
xwalk b 
on a.spid=b.spid;
quit;

proc sort data=index out=proj_int.index nodupkey;
by spid bene_id index_year;
run;

H="FFS pre index date"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/

proc sort data=medi.mbsf_06_12 out=mbsf  nodupkey;
by bene_id year;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/*get mbsf just for interview year*/

proc sql; 
create table mbsf_index_year as select
a.*,b.buyin12,b.year,b.hmoind12
from index1 a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id)) 
and a.index_year=b.year;
quit;


proc sql;
select count(distinct bene_id) from mbsf_index_year;
quit;



data mbsf_index_year2;
set mbsf_index_year;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_iy=substr(trim(left(buyin12)),1,index_month);
hmo_iy=substr(trim(left(HMOIND12)),1,index_month);
end;
else do;
buyin_iy=trim(left(buyin12));
hmo_iy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;

proc sql;
create table mbsf_index_year_bef as select
a.bene_id,a.year as index_year,
b.year as index_year_bef,
b.year, b.buyin12,b.HMOIND12
from mbsf_index_year a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.year-b.year<=1 order by bene_id,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table mbsf_index_year_2bef as select
a.bene_id,a.bene_id,a.index_year,a.index_year_bef,
b.year as index_year_2bef,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year_bef a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.index_year_bef-b.year<=1 order by bene_id,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
mbsf_index_year2 a
left join
mbsf_index_year_bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sql;
create table all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
all_insurance a
left join
mbsf_index_year_2bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year; 
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data all_insurance3;
set all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_iy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_iy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;


data proj_int.ffs_before;
set all_insurance3;
run;


H="ffx post index date"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/

proc sort data=medi.mbsf_06_12 out=mbsf  nodupkey;
by bene_id year;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/*get mbsf just for interview year*/

proc sql; 
create table mbsf_index_year as select
a.*,b.buyin12,b.year,b.hmoind12
from index1 a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id)) 
and a.index_year=b.year;
quit;


proc sql;
select count(distinct bene_id) from mbsf_index_year;
quit;



data mbsf_index_year2;
set mbsf_index_year;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_iy=substr(trim(left(buyin12)),index_month,13-index_month);
hmo_dy=substr(trim(left(HMOIND12)),index_month,13-index_month);
buyin_at_death=substr(trim(left(buyin12)),index_month,1);
hmo_at_death=substr(trim(left(HMOIND12)),index_month,1);
end;
else do;
buyin_iy=trim(left(buyin12));
hmo_iy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;


proc sql;
create table mbsf_index_year_aft as select
a.bene_id,a.bene_id,a.year as index_year,
b.year as index_year_aft,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and a.year-b.year=-1 order by bene_id,year;
quit;


/* and the year aftore... 1790 have the +2 year dn file*/
proc sql;
create table mbsf_index_year_2aft as select
a.bene_id,a.bene_id,a.index_year,a.index_year_aft,
b.year as index_year_2aft,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year_aft a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and a.index_year_aft-b.year=-1 order by bene_id,year;
quit;

/*merge the insurance data for death year, +1 and +2 years into single dataset*/
proc sql;
create table all_insurance as select a.*,b.buyin12 as buyin_aft,b.HMOIND12 as hmo_aft from
mbsf_index_year2 a
left join
mbsf_index_year_aft b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sql;
create table all_insurance2 as select a.*,b.buyin12 as buyin_2aft,b.HMOIND12 as hmo_2aft from
all_insurance a
left join
mbsf_index_year_2aft b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;


/*merge death year and year aftore death buy-in and hmo variables
Trim so the final variable _p6m is 6 months post-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months post-death*/
data all_insurance3;
set all_insurance2;
buyin_2y=trimn(left(buyin_iy))||trimn(left(buyin_aft))||trimn(left(buyin_2aft));
hmo_2y=trimn(left(hmo_dy))||trimn(left(hmo_aft))||trimn(left(hmo_2aft));

/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p_mos=length(buyin_2y);
if indexc(buyin_2y,"0","1","2","A","B") then part_ab_p_mos=indexc(buyin_2y,"0","1","2","A","B");
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then non_hmo_d_p_mos=length(hmo_2y);
if indexc(hmo_2y,"1","2","4","A","B","C") then non_hmo_d_p_mos=indexc(hmo_2y,"1","2","4","A","B","C");
if indexc(buyin_at_death,"0","1","2","A","B")=1 then part_ab_at_death=0;
if indexc(buyin_at_death,"0","1","2","A","B")=0 then part_ab_at_death=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=1 then hmo_d_at_death=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=0 then hmo_d_at_death=0;

if part_ab_p_mos<=non_hmo_d_p_mos then cont_ffs_p_mos=part_ab_p_mos;
if non_hmo_d_p_mos<part_ab_p_mos then cont_ffs_p_mos=non_hmo_d_p_mos;
run;

data proj_int.ffs_after;
set all_insurance3;
run;

H="claims pre index date"
/*Get claims 1 year and 2 year before each interview*/
/*Step 2: pull claims lists using xwalk and ivw date*/

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/****************************************************************************/
/* Macro to pull claims lists, saves lists to int_data folder               */
/****************************************************************************/
%macro claims_pre(days_start=,days_bef_index=,yrs=,source=);

proc sql;
create table &source._meet_&days_bef_index. as select a.index_date,a.index_year,b.*
from proj_int.index a inner join
medi.&source._&yrs. b 
on trim(left(a.bene_id))=trim(left(b.bene_id))
and &days_start<=a.index_date-b.disch_date<=&days_bef_index;
quit;

%mend;

/*run to get claims list 6 mo pre-ivw for ip*/
%claims_pre(days_start=0,days_bef_index=183,yrs=06_12,source=ip);

/*1yr*/
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=ip);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=snf);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=op);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=pb);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=hh);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=hs);
%claims_pre(days_start=0,days_bef_index=365,yrs=06_12,source=dm);

/*2yrs*/
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=ip);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=snf);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=op);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=pb);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=hh);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=hs);
%claims_pre(days_start=0,days_bef_index=730,yrs=06_12,source=dm);

%macro ip_drop(days_bef_index=);
data proj_int.ip_meet_&days_bef_index.;
set ip_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 icarecnt crnrydaycnt erdaycnt clm_ip_admsn_type_cd
  PRCDR_DT1-PRCDR_DT25 hcpcscd1-hcpcscd49);
run;
%mend ip_drop;

%macro snf_drop(days_bef_index=);
data proj_int.snf_meet_&days_bef_index.;
set snf_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 
 PRCDR_DT1-PRCDR_DT25 );
run;
%mend snf_drop;


/*hh*/
%macro hh_drop(days_bef_index=);
data proj_int.hh_meet_&days_bef_index.;
set hh_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
run;
%mend hh_drop;

/*hs*/
%macro hs_drop(days_bef_index=);
data proj_int.hs_meet_&days_bef_index.;
set hs_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25);
run;
%mend hs_drop;

/*dme*/
%macro dm_drop(days_bef_index=);
data proj_int.dm_meet_&days_bef_index.;
set dm_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date 
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 h_o2);
run;
%mend dm_drop;

/*op*/
%macro op_drop(days_bef_index=);
data proj_int.op_meet_&days_bef_index.;
set op_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 erdaycnt);
run;
%mend op_drop;

/*carrier*/
%macro pb_drop(days_bef_index=);
data proj_int.pb_meet_&days_bef_index.;
set pb_meet_&days_bef_index.(keep=bene_id index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
run;
%mend pb_drop;

%ip_drop(days_bef_index=183);
%ip_drop(days_bef_index=365);
%ip_drop(days_bef_index=730);
%snf_drop(days_bef_index=365);
%snf_drop(days_bef_index=730);
%hh_drop(days_bef_index=365);
%hh_drop(days_bef_index=730);
%hs_drop(days_bef_index=365);
%hs_drop(days_bef_index=730);
%dm_drop(days_bef_index=365);
%dm_drop(days_bef_index=730);
%op_drop(days_bef_index=365);
%op_drop(days_bef_index=730);
%pb_drop(days_bef_index=365);
%pb_drop(days_bef_index=730);



/****************************************************************************/
/****************************************************************************/
/* Macro to pull dx from claims lists, saves dx lists to int_data folder    */
/****************************************************************************/

%macro dx_time_range(range1=, range2=, days_bef_core=);

/*Process carrier medicare claims to pull out dx codes
Multiple lines per each BID*/
data pb_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.pb_meet_&days_bef_core.(keep=bene_id index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12;
do over dx;
diag=dx ;
output;
end;
run;
/*check for and remove duplicates, note this doesn't remove blanks*/
proc sort data=pb_last_&range2._dx out=pb_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;


/*Process outpatient medicare claims to pull out dx codes
Dataset being created: op_last_&range2._dx2*/
data op_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.op_meet_&days_bef_core.(keep=bene_id index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25  );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx out=op_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;

proc contents data=proj_int.ip_meet_365; run;


/*Dataset being created: ip_last_&range2._dx2*/
data ip_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.ip_meet_&days_bef_core.(keep=bene_id index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 hcpcscd1-hcpcscd49);
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=ip_last_&range2._dx out=ip_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;

/*Dataset being created: snf_last_&range2._dx2*/
data snf_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.snf_meet_&days_bef_core.(keep=bene_id index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=snf_last_&range2._dx out=snf_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;

/*Process dme medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data dm_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.dm_meet_&days_bef_core.(keep=bene_id index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx out=dm_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;

/*Process hh medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hh_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.hh_meet_&days_bef_core.(keep=bene_id index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx out=hh_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;

/*Process hs medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hs_last_&range2._dx(keep=bene_id index_year diag);
set proj_int.hs_meet_&days_bef_core.(keep=bene_id index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx out=hs_last_&range2._dx2 nodupkey;
by bene_id index_year diag;
run;


/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3;
length diag $7;
set hs_last_&range2._dx2;
run;
data hh_last_&range2._dx3;
length diag $7;
set hh_last_&range2._dx2;
run;
data ip_last_&range2._dx3;
length diag $7;
set ip_last_&range2._dx2;
run;
data snf_last_&range2._dx3;
length diag $7;
set snf_last_&range2._dx2;
run;
data dm_last_&range2._dx3;
length diag $7;
set dm_last_&range2._dx2;
run;
data op_last_&range2._dx3;
length diag $7;
set op_last_&range2._dx2;
run;
data pb_last_&range2._dx3;
length diag $7;
set pb_last_&range2._dx2;
run;


/*merge diagnoses from each claim type into single dataset*/
data dx_all_last_1&range2.;
set hs_last_&range2._dx3
hh_last_&range2._dx3
ip_last_&range2._dx3
snf_last_&range2._dx3
dm_last_&range2._dx3
op_last_&range2._dx3
pb_last_&range2._dx3;
run;

proc sql;
create table dx_all_last_&range2. as select * from
proj_int.index a 
left join 
dx_all_last_1&range2. b
on a.bene_id=b.bene_id and a.index_year=b.index_year;
quit; 

proc sort data=dx_all_last_&range2.(where=(diag~="")) out=proj_int.dx_&range1._&range2 nodupkey;
by bene_id index_year diag;
run;


%mend;

/*1 and 2 years pre-interview: proj_int.dx_0_1yr, proj_int.dx_0_2yr */
%dx_time_range(range1=0, range2=1yr, days_bef_core=365);
%dx_time_range(range1=0, range2=2yr, days_bef_core=730);



data dx_all_last_1yr_w_dups;
set hs_last_1yr_dx
hh_last_1yr_dx
ip_last_1yr_dx
snf_last_1yr_dx
dm_last_1yr_dx
op_last_1yr_dx
pb_last_1yr_dx;
if diag~='.';
run;

proc sort data=dx_all_last_1yr_w_dups;
by bene_id index_year diag;
run;

/*****************************************/
/*check dementia diagnosis frequencies, need to pull this into main dataset
dx list is from Elixhauser code*/
data proj_int.dem_dx_freq;
set dx_all_last_1yr_w_dups;
	dementia=0;
	if (substr(diag,1,4) in ('3310','3311','3312','2900','2901',
             '2902','2903','2912','2948','2949') or
		substr(diag,1,5) in ('29410','29411','29040','29041','29042','29043')) 
		and dementia=0 
          then dementia=1;
run;



H="claims post index date"
/*Get claims 1 year and 2 year before each interview*/
/*Step 2: pull claims lists using xwalk and ivw date*/

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/****************************************************************************/
/* Macro to pull claims lists, saves lists to int_data folder               */
/****************************************************************************/
%macro claims_post(days_start=,days_aft_index=,yrs=,source=);

proc sql;
create table &source._meet_&days_aft_index.p as select a.*,b.index_date,b.index_year
from medi.&source._&yrs. a inner join
proj_int.index b 
on trim(left(a.bene_id))=trim(left(b.bene_id))
and &days_start<=a.admit_date-b.index_date<=&days_aft_index;
quit;

%mend;

/*run to get claims list 6 mo pre-ivw for ip*/
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=ip);

/*6m*/
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=ip);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=snf);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=op);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=pb);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=hh);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=hs);
%claims_post(days_start=0,days_aft_index=183,yrs=06_12,source=dm);

/*1yr*/
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=ip);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=snf);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=op);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=pb);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=hh);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=hs);
%claims_post(days_start=0,days_aft_index=365,yrs=06_12,source=dm);

/*2yrs*/
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=ip);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=snf);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=op);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=pb);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=hh);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=hs);
%claims_post(days_start=0,days_aft_index=730,yrs=06_12,source=dm);

%macro ip_drop(days_aft_index=);
data proj_int.ip_meet_&days_aft_index.p;
set ip_meet_&days_aft_index.p(keep=clm_pmt_amt clm_pass_thru_per_diem_amt bene_id index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 crnrydaycnt icarecnt erdaycnt clm_ip_admsn_type_cd
  PRCDR_DT1-PRCDR_DT25);
run;
%mend ip_drop;

%macro snf_drop(days_aft_index=);
data proj_int.snf_meet_&days_aft_index.p;
set snf_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 
 PRCDR_DT1-PRCDR_DT25 );
run;
%mend snf_drop;


/*hh*/
%macro hh_drop(days_aft_index=);
data proj_int.hh_meet_&days_aft_index.p;
set hh_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
run;
%mend hh_drop;

/*hs*/
%macro hs_drop(days_aft_index=);
data proj_int.hs_meet_&days_aft_index.p;
set hs_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25);
run;
%mend hs_drop;

/*dme*/
%macro dm_drop(days_aft_index=);
data proj_int.dm_meet_&days_aft_index.p;
set dm_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
run;
%mend dm_drop;

/*op*/
%macro op_drop(days_aft_index=);
data proj_int.op_meet_&days_aft_index.p;
set op_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 erdaycnt);
run;
%mend op_drop;

/*carrier*/
%macro pb_drop(days_aft_index=);
data proj_int.pb_meet_&days_aft_index.p;
set pb_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
run;
%mend pb_drop;

%ip_drop(days_aft_index=183);
%ip_drop(days_aft_index=365);
%ip_drop(days_aft_index=730);
%snf_drop(days_aft_index=183);
%snf_drop(days_aft_index=365);
%snf_drop(days_aft_index=730);
%hh_drop(days_aft_index=183);
%hh_drop(days_aft_index=365);
%hh_drop(days_aft_index=730);
%hs_drop(days_aft_index=183);
%hs_drop(days_aft_index=365);
%hs_drop(days_aft_index=730);
%dm_drop(days_aft_index=183);
%dm_drop(days_aft_index=365);
%dm_drop(days_aft_index=730);
%op_drop(days_aft_index=183);
%op_drop(days_aft_index=365);
%op_drop(days_aft_index=730);
%pb_drop(days_aft_index=183);
%pb_drop(days_aft_index=365);
%pb_drop(days_aft_index=730);


H="utilization from claims"
/*These additional variables are just added to the dataset with the
elixhauser and cc's 1 year preceeding the interview, can add them
later when required to get the 2 year look-back dataset*/

/****************************************************************************/
/*Get indicator of any hospital admission 6 and 12 months pre-core interview*/
/****************************************************************************/

%macro admissions(days=,suffix=);

/*pull list of ip claims from all medpar claims x days pre-interview*/
data ip_meet_&days.;
set proj_int.ip_meet_&days.;
run;
data ip_&days._2;
set ip_meet_&days.;
type_adm=clm_ip_admsn_type_cd;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if erdaycnt>0 & erdaycnt~=. then ind_ed_charge=1;
if erdaycnt=0 | erdaycnt=. then ind_ed_charge=0;

/*truncate stays where the admit is more than x days before interview
or discharge is after the interview date so can get accurate LOS*/
if index_date-admit_date>&days. then do;
	admit_date=index_date-&days.;
	admit_trunc=1;
	end;
if index_date<disch_date then do;
	disch_date=index_date;
	disch_trunc=1;	
	end;
adj_los=disch_date-admit_date;
if disch_date-admit_date=0 then adj_los=1;
run;

proc sort data=ip_&days._2;
by bene_id index_year;
run;

proc sql;
create table ip_&days._3 as select distinct bene_id,index_year,
/*total ICU days*/
sum(icu_days) as icu_days_&suffix. label="total icu days &suffix. pre ivw ivw",
/*count of IP admissions, all types*/
count(*) as n_ip_admit_&suffix. label="total n of hospital admit &suffix. pre ivw ivw",
/*total Hospital LOS*/
sum(adj_los) as n_hospd_&suffix. label="total hospital days &suffix. pre ivw ivw",
/*count urgent or emergency admissions*/
count(case when em_urgent_admit=1 then em_urgent_admit else . end) as n_em_urgent_admit_&suffix. 
	label="total n of urgent/emergent hospital admit &suffix. pre ivw ivw",
/*count of emergency admissions, from admission type code*/
count(case when em_admit=1 then em_admit else . end) as n_em_admit_&suffix. 
	label="total n of emergent hospital admit &suffix. pre ivw ivw",
/*count of urgent admissions, from admission type code*/
count(case when urgent_admit=1 then urgent_admit else . end) as n_urgent_admit_&suffix. 
	label="total n of urgent hospital admit &suffix. pre ivw ivw",
/*count of elective admissions, from admission type code*/
count(case when elect_admit=1 then elect_admit else . end) as n_elect_admit_&suffix. 
	label="total n of elective hospital admit &suffix. pre ivw ivw",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix. pre ivw ivw"

 from ip_&days._2 group by bene_id,index_year;
quit;

data ip_&days._4;
set ip_&days._3;
if icu_days_&suffix.>n_hospd_&suffix. then icu_days_&suffix.=n_hospd_&suffix.;
run;

%mend;

%admissions(days=183,suffix=6m);
%admissions(days=365,suffix=12m);

data elective_1;
set ip_365_2;
if elect_admit=1;
run;



proc sort data=ip_183_3 nodupkey;
by bene_id index_year;
run;


proc sql;
create table ip_6m as select a.*,b.icu_days_6m,
b.n_ip_admit_6m,b.n_hospd_6m,b.n_em_urgent_admit_6m,b.n_em_admit_6m,
b.n_urgent_admit_6m,b.n_elect_admit_6m,b.n_ED_ip_6m
from proj_int.index a
left join
ip_183_3 b 
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sort data=ip_365_3 nodupkey;
by bene_id index_year;
run;

proc sql;
create table ip1 as select a.*,b.icu_days_12m,
b.n_ip_admit_12m,b.n_hospd_12m,b.n_em_urgent_admit_12m,b.n_em_admit_12m,
b.n_urgent_admit_12m,b.n_elect_admit_12m,b.n_ED_ip_12m
from ip_6m a
left join
ip_365_3 b 
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

/*Dataset just contains obs with ffs mc 1yr and age 65+
So if missing, set var to 0*/
 data ip ;
 set ip1 ;
 array list icu_days_6m n_ip_admit_6m n_hospd_6m n_em_urgent_admit_6m 
	n_em_admit_6m n_urgent_admit_6m n_elect_admit_6m n_ED_ip_6m
	icu_days_12m n_ip_admit_12m n_hospd_12m n_em_urgent_admit_12m
	n_em_admit_12m n_urgent_admit_12m n_elect_admit_12m n_ED_ip_12m;
 do over list;
 if list=. then list=0;
 end;

 if n_ip_admit_6m=0 then ind_hosp_adm_6m=0;
 if n_ip_admit_6m>0 & n_ip_admit_6m~=. then ind_hosp_adm_6m=1;
 label ind_hosp_adm_6m="Indicator for any hospital admission 6m pre ivw";

 if n_em_urgent_admit_6m=0 then ind_em_ur_adm_6m=0;
 if n_em_urgent_admit_6m>0 & n_em_urgent_admit_6m~=. then ind_em_ur_adm_6m=1;
 label ind_em_ur_adm_6m="Ind any urgent or emergent hospital admission 6m pre ivw";

 if n_em_admit_6m=0 then ind_em_adm_6m=0;
 if n_em_admit_6m>0 & n_em_admit_6m~=. then ind_em_adm_6m=1;
 label ind_em_adm_6m="Ind any emergency hospital admission 6m pre ivw";

 if n_urgent_admit_6m=0 then ind_ur_adm_6m=0;
 if n_urgent_admit_6m>0 & n_urgent_admit_6m~=. then ind_ur_adm_6m=1;
 label ind_ur_adm_6m="Ind any urgent hospital admission 6m pre ivw";

 if n_elect_admit_6m =0 then ind_elect_adm_6m=0;
 if n_elect_admit_6m >0 & n_elect_admit_6m ~=. then ind_elect_adm_6m=1;
 label ind_elect_adm_6m="Ind any elective hospital admission 6m pre ivw";

 if (n_ip_admit_6m - n_elect_admit_6m)=0 then ind_nonelect_adm_6m=0;
 if (n_ip_admit_6m - n_elect_admit_6m)>0 & n_elect_admit_6m~=. then ind_nonelect_adm_6m=1;
 label ind_nonelect_adm_6m="Ind any non-elective hospital admission 6m pre ivw";

 n_nonelect_adm_6m=(n_ip_admit_6m - n_elect_admit_6m);
 label n_nonelect_adm_6m="total n non-elective ip admit 6m pre ivw";

 if n_ED_ip_6m=0 then ind_ED_adm_6m=0;
 if n_ED_ip_6m>0 & n_ED_ip_6m~=. then ind_ED_adm_6m=1;
 label ind_ED_adm_6m="Ind ED use with hospital admission 6m pre ivw, from charges";

 if n_ip_admit_12m=0 then ind_hosp_adm_12m=0;
 if n_ip_admit_12m>0 & n_ip_admit_12m~=. then ind_hosp_adm_12m=1;
 label ind_hosp_adm_12m="Indicator for any hospital admission 12m pre ivw";

 if n_em_urgent_admit_12m=0 then ind_em_ur_adm_12m=0;
 if n_em_urgent_admit_12m>0 & n_em_urgent_admit_12m~=. then ind_em_ur_adm_12m=1;
 label ind_em_ur_adm_12m="Ind any urgent or emergent hospital admission 12m pre ivw";

 if n_em_admit_12m=0 then ind_em_adm_12m=0;
 if n_em_admit_12m>0 & n_em_admit_12m~=. then ind_em_adm_12m=1;
 label ind_em_adm_12m="Ind any emergency hospital admission 12m pre ivw";

 if n_urgent_admit_12m=0 then ind_ur_adm_12m=0;
 if n_urgent_admit_12m>0 & n_urgent_admit_12m~=. then ind_ur_adm_12m=1;
 label ind_ur_adm_12m="Ind any urgent hospital admission 12m pre ivw";

 if n_elect_admit_12m =0 then ind_elect_adm_12m=0;
 if n_elect_admit_12m >0 & n_elect_admit_12m ~=. then ind_elect_adm_12m=1;
 label ind_elect_adm_12m="Ind any elective hospital admission 12m pre ivw";

 if (n_ip_admit_12m - n_elect_admit_12m)=0 then ind_nonelect_adm_12m=0;
 if (n_ip_admit_12m - n_elect_admit_12m)>0 & n_elect_admit_12m~=. then ind_nonelect_adm_12m=1;
 label ind_nonelect_adm_12m="Ind any non-elective hospital admission 12m pre ivw";

 n_nonelect_adm_12m=(n_ip_admit_12m - n_elect_admit_12m);
 label n_nonelect_adm_12m="total n non-elective ip admit 12m pre ivw";

 if n_ED_ip_12m=0 then ind_ED_adm_12m=0;
 if n_ED_ip_12m>0 & n_ED_ip_12m~=. then ind_ED_adm_12m=1;
 label ind_ED_adm_12m="Ind ED use with hospital admission 12m pre ivw, from charges";

run;

 proc freq;
 table icu_days_6m n_ip_admit_6m n_hospd_6m ind_hosp_adm_6m n_em_urgent_admit_6m ind_em_ur_adm_6m 
	ind_em_adm_6m ind_ur_adm_6m ind_nonelect_adm_6m n_nonelect_adm_6m n_ED_ip_6m ind_ED_adm_6m 
	ind_em_adm_6m*ind_ED_adm_6m /missprint;
 run;

proc freq;
table icu_days_12m n_ip_admit_12m n_hospd_12m ind_hosp_adm_12m n_em_urgent_admit_12m ind_em_ur_adm_12m
	ind_em_adm_12m ind_ur_adm_12m ind_nonelect_adm_12m n_nonelect_adm_12m n_ED_ip_12m ind_ED_adm_12m 
	ind_em_adm_12m*ind_ED_adm_12m /missprint;
run;

/****************************************************************************/
/****************************************************************************/
/*Get SNF days, indicator for 12 months preceding the interview*/
/****************************************************************************/
/****************************************************************************/

/*pull list of snf claims from all medpar claims 12 months pre-interview*/
data snf_meet_365;
set proj_int.snf_meet_365;
run;

proc sort data=snf_meet_365;
by bene_id admit_date;
run;

data snf_meet_365_1a;
set snf_meet_365;
format admit_date date9. disch_date date9.;
run;

/*3 claim windows are present:
1. SNF stays fully within the 1 year before interview
2. Stays that begin before 1 year pre-core but end within 1 year pre-core
3. Stays that begin within 1 year of core but end after core ivw
4. Stays that begin before 1 year and end after interview, LOS=365!
Get claims that meet 1 *1797*/
proc sql;
create table snf_meet1_pre_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)<365 & (index_date - disch_date)>=0; 
quit;


/*meet time window 2 *152*/
proc sql;
create table snf_meet2_pre_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)>=365 & (index_date - disch_date)>=0; 
quit;

/*For these claims that start > 1 year before core, truncate start date so 
only count LOS days w/i 1 year
create indicator variable that claim start date is truncated*/
data snf_meet2_pre_365_1;
set snf_meet2_pre_365;
admit_date = index_date-365;
snf_admit_date_mod = 1;
label snf_admit_date_mod = "Admit date mod; at 12 mo from ivw date";
run;

proc freq;
table snf_admit_date_mod ;
run;

/*meet time window 3 *135 */
proc sql;
create table snf_meet3_pre_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)<365 & (index_date-disch_date)<0; 
quit;

/*For these claims that end after core, truncate end date so 
only count LOS days 1 year before the core
create indicator variable that claim end date is truncated*/
data snf_meet3_pre_365_1;
set snf_meet3_pre_365;
disch_date = index_date;
snf_disch_date_mod = 1;
label snf_disch_date_mod = "Disch date mod; at ivw date";
run;

proc freq;
table snf_disch_date_mod ;
run;

/*meet 4 , overlap both start and end dates n=7*/
proc sql;
create table snf_meet4_pre_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)>=365 & (index_date - disch_date)<0; 
quit;

/*truncate both start and end dates so just count 1 year pre interview*/
data snf_meet4_pre_365_1;
set snf_meet4_pre_365;
disch_date = index_date;
snf_disch_date_mod = 1;
label snf_disch_date_mod = "Disch date mod; at ivw date";
admit_date = index_date-365;
snf_admit_date_mod = 1;
label snf_admit_date_mod = "Admit date mod; at 12 mo from ivw date";
run;

proc freq;
table snf_disch_date_mod snf_admit_date_mod;
run;


data snf_meet_pre_365;
set snf_meet1_pre_365 snf_meet2_pre_365_1 snf_meet3_pre_365_1 snf_meet4_pre_365_1;
run;

proc freq;
table snf_admit_date_mod snf_disch_date_mod ;
run;

/*save final files to project int_data directory*/
data proj_int.snf_meet_pre_365 ;
set  snf_meet_pre_365;
run;

/*************************************************************/
/*calculate total number of days spent in SNF by BID*/
/*************************************************************/

data pre_snf_days_1;
set proj_int.snf_meet_pre_365;
calc_snf_LOS=disch_date-admit_date;
if calc_snf_LOS=0 then calc_snf_LOS=1;
run;

proc sort data=pre_snf_days_1;
by bene_id index_date admit_date;
run;

proc sql;
create table snf_days_pre as select distinct bene_id,index_year,
sum(calc_snf_LOS)
	as n_snf_days_12m
	from pre_snf_days_1 group by bene_id,index_year;
quit;


/*merge into full ffs 1yr, age 65+ dataset*/
proc sort data=snf_days_pre nodupkey;
by bene_id index_year;
run;



 data snf ;
 set snf_days_pre ;
 array list n_snf_days_12m;
 do over list;
 if list=. then list=0;
 end; 

if n_snf_days_12m=0 then ind_snf_use_12m=0;
 if n_snf_days_12m>0 & n_snf_days_12m~=. then ind_snf_use_12m=1;
 label ind_snf_use_12m="Indicator for any SNF stay 12m pre ivw";
 label n_snf_days_12m="SNF Days 12m pre ivw";

run;

/****************************************************************************/
/****************************************************************************/
/*Get indicator of ESRD codes from the denominator file the year of the interview*/
/****************************************************************************/
/****************************************************************************/
proc sort data=medi.mbsf_06_12 out=dn_2000_20122  nodupkey;
by bene_id year;
run;

/*pull ESRD status variable from dn file
for the core interview years*/
proc sql;
create table esrd1 as select
a.*,b.Bene_ESRD_IND from 
proj_int.index a left join
dn_2000_20122 b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and a.index_year=b.year;
quit;

proc freq;
table bene_esrd_ind /missprint;
run;

data esrd;
set esrd1 ;
if bene_esrd_ind='Y' then esrd_ind_n=1;
if bene_esrd_ind='0' then esrd_ind_n=0;
label esrd_ind_n="ESRD indicator from claims denominator file";
drop bene_esrd_ind;
run;

proc freq;
table esrd_ind_n /missprint;
run;

/****************************************************************************/
/*Get indicator of Home 02 use 12 months pre interview from DME claims*/
/****************************************************************************/
data oxygen1(keep=bene_id index_year oxygen);
set proj_int.dm_meet_365;
oxygen=0;
if h_o2>0 then oxygen=1;
run;

proc sort data=oxygen1 out=oxygen nodupkey;
by bene_id index_year;
run;
proc contents data=medi.op_06_12; run;
data ed_op_1;
set proj_int.op_meet_365(keep=bene_id admit_date disch_date index_date index_year erdaycnt);
if erdaycnt>0 then ed_op=1;
if erdaycnt=0 then ed_op=0;
run;

proc freq;
table ed_op;
run;

proc sql;
create table ed_op_2 as select distinct bene_id,index_year,
count(case when ed_op=1 then ed_op else . end)
	as n_ed_op_visits_12m
	from ed_op_1 group by bene_id,index_year;
quit;

proc freq;
table n_ed_op_visits_12m;
run;


proc sort data=ed_op_2 nodupkey;
by bene_id index_year;
run;


data ed ;
set ed_op_2;
if n_ed_op_visits_12m=. and comorb_1_0_1yr~=. then n_ed_op_visits_12m=0;
label n_ed_op_visits_12m="Count ED OP visits, 1yr pre ivw";

if n_ed_op_visits_12m=0 then ind_ed_op_12m=0;
if n_ed_op_visits_12m>0 & n_ed_op_visits_12m~=. then ind_ed_op_12m=1;
label ind_ed_op_12m="Indicator any ED OP visits, 1 yr pre ivw";
run;

proc freq;
table n_ed_op_visits_12m*ind_ed_op_12m;
run;

proc sql;
create table proj_int.utilization_pre as select * 
from proj_int.index a 
left join
ip b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year
left join 
snf c
on trim(left(a.bene_id))=trim(left(c.bene_id)) and a.index_year=c.index_year
left join 
esrd d
on trim(left(a.bene_id))=trim(left(d.bene_id)) and a.index_year=d.index_year
left join
oxygen e
on trim(left(a.bene_id))=trim(left(e.bene_id)) and a.index_year=e.index_year
left join 
ed f
on trim(left(a.bene_id))=trim(left(f.bene_id)) and a.index_year=f.index_year;
quit;

proc contents data=proj_int.utilization_pre; 
run;

H="utilization post"
/*These additional variables are just added to the dataset with the
elixhauser and cc's 1 year preceeding the interview, can add them
later when required to get the 2 year look-back dataset*/

/****************************************************************************/
/*Get indicator of any hospital admission 6 and 12 months pre-core interview*/
/****************************************************************************/

%macro admissions(days=,suffix=);

/*pull list of ip claims from all medpar claims x days pre-interview*/
data ip_meet_&days.;
set proj_int.ip_meet_&days.p;
run;
data ip_&days._2;
set ip_meet_&days.;
type_adm=clm_ip_admsn_type_cd;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if erdaycnt>0 & erdaycnt~=. then ind_ed_charge=1;
if erdaycnt=0 | erdaycnt=. then ind_ed_charge=0;

/*truncate stays where the admit is more than x days before interview
or discharge is after the interview date so can get accurate LOS*/
if disch_date-index_date>&days. then do;
	disch_date=index_date+&days.;
	admit_trunc=1;
	end;
if admit_date<index_date then do;
	admit_date=index_date;
	admit_trunc=1;	
	end;
adj_los=disch_date-admit_date;
if disch_date-admit_date=0 then adj_los=1;
run;

proc sort data=ip_&days._2;
by bene_id index_year;
run;

proc sql;
create table ip_&days._3 as select distinct bene_id,index_year,
/*total ICU days*/
sum(icu_days) as icu_days_&suffix. label="total icu days &suffix. post ivw",
/*count of IP admissions, all types*/
count(*) as n_ip_admit_&suffix. label="total n of hospital admit &suffix. post ivw",
/*total Hospital LOS*/
sum(adj_los) as n_hospd_&suffix. label="total hospital days &suffix. post ivw",
/*count urgent or emergency admissions*/
count(case when em_urgent_admit=1 then em_urgent_admit else . end) as n_em_urgent_admit_&suffix. 
	label="total n of urgent/emergent hospital admit &suffix. post ivw",
/*count of emergency admissions, from admission type code*/
count(case when em_admit=1 then em_admit else . end) as n_em_admit_&suffix. 
	label="total n of emergent hospital admit &suffix. post ivw",
/*count of urgent admissions, from admission type code*/
count(case when urgent_admit=1 then urgent_admit else . end) as n_urgent_admit_&suffix. 
	label="total n of urgent hospital admit &suffix. post ivw",
/*count of elective admissions, from admission type code*/
count(case when elect_admit=1 then elect_admit else . end) as n_elect_admit_&suffix. 
	label="total n of elective hospital admit &suffix. post ivw",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix. post ivw"

 from ip_&days._2 group by bene_id,index_year;
quit;

data ip_&days._4;
set ip_&days._3;
if icu_days_&suffix.>n_hospd_&suffix. then icu_days_&suffix.=n_hospd_&suffix.;
run;

%mend;

%admissions(days=183,suffix=p6m);
%admissions(days=365,suffix=p12m);

data elective_1;
set ip_365_2;
if elect_admit=1;
run;



proc sort data=ip_183_3 nodupkey;
by bene_id index_year;
run;


proc sql;
create table ip_p6m as select a.*,b.icu_days_p6m,
b.n_ip_admit_p6m,b.n_hospd_p6m,b.n_em_urgent_admit_p6m,b.n_em_admit_p6m,
b.n_urgent_admit_p6m,b.n_elect_admit_p6m,b.n_ED_ip_p6m
from proj_int.index a
left join
ip_183_3 b 
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sort data=ip_365_3 nodupkey;
by bene_id index_year;
run;

proc sql;
create table ip1 as select a.*,b.icu_days_p12m,
b.n_ip_admit_p12m,b.n_hospd_p12m,b.n_em_urgent_admit_p12m,b.n_em_admit_p12m,
b.n_urgent_admit_p12m,b.n_elect_admit_p12m,b.n_ED_ip_p12m
from ip_p6m a
left join
ip_365_3 b 
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

/*Dataset just contains obs with ffs mc 1yr and age 65+
So if missing, set var to 0*/
 data ip ;
 set ip1 ;
 array list icu_days_p6m n_ip_admit_p6m n_hospd_p6m n_em_urgent_admit_p6m 
	n_em_admit_p6m n_urgent_admit_p6m n_elect_admit_p6m n_ED_ip_p6m
	icu_days_p12m n_ip_admit_p12m n_hospd_p12m n_em_urgent_admit_p12m
	n_em_admit_p12m n_urgent_admit_p12m n_elect_admit_p12m n_ED_ip_p12m;
 do over list;
 if list=. then list=0;
 end;

 if n_ip_admit_p6m=0 then ind_hosp_adm_p6m=0;
 if n_ip_admit_p6m>0 & n_ip_admit_p6m~=. then ind_hosp_adm_p6m=1;
 label ind_hosp_adm_p6m="Indicator for any hospital admission 6m post ivw";

 if n_em_urgent_admit_p6m=0 then ind_em_ur_adm_p6m=0;
 if n_em_urgent_admit_p6m>0 & n_em_urgent_admit_p6m~=. then ind_em_ur_adm_p6m=1;
 label ind_em_ur_adm_p6m="Ind any urgent or emergent hospital admission 6m post ivw";

 if n_em_admit_p6m=0 then ind_em_adm_p6m=0;
 if n_em_admit_p6m>0 & n_em_admit_p6m~=. then ind_em_adm_p6m=1;
 label ind_em_adm_p6m="Ind any emergency hospital admission 6m post ivw";

 if n_urgent_admit_p6m=0 then ind_ur_adm_p6m=0;
 if n_urgent_admit_p6m>0 & n_urgent_admit_p6m~=. then ind_ur_adm_p6m=1;
 label ind_ur_adm_p6m="Ind any urgent hospital admission 6m post ivw";

 if n_elect_admit_p6m =0 then ind_elect_adm_p6m=0;
 if n_elect_admit_p6m >0 & n_elect_admit_p6m ~=. then ind_elect_adm_p6m=1;
 label ind_elect_adm_p6m="Ind any elective hospital admission 6m post ivw";

 if (n_ip_admit_p6m - n_elect_admit_p6m)=0 then ind_nonelect_adm_p6m=0;
 if (n_ip_admit_p6m - n_elect_admit_p6m)>0 & n_elect_admit_p6m~=. then ind_nonelect_adm_p6m=1;
 label ind_nonelect_adm_p6m="Ind any non-elective hospital admission 6m post ivw";

 n_nonelect_adm_p6m=(n_ip_admit_p6m - n_elect_admit_p6m);
 label n_nonelect_adm_p6m="total n non-elective ip admit 6m post ivw";

 if n_ED_ip_p6m=0 then ind_ED_adm_p6m=0;
 if n_ED_ip_p6m>0 & n_ED_ip_p6m~=. then ind_ED_adm_p6m=1;
 label ind_ED_adm_p6m="Ind ED use with hospital admission 6m post ivw, from charges";

 if n_ip_admit_p12m=0 then ind_hosp_adm_p12m=0;
 if n_ip_admit_p12m>0 & n_ip_admit_p12m~=. then ind_hosp_adm_p12m=1;
 label ind_hosp_adm_p12m="Indicator for any hospital admission 12m post ivw";

 if n_em_urgent_admit_p12m=0 then ind_em_ur_adm_p12m=0;
 if n_em_urgent_admit_p12m>0 & n_em_urgent_admit_p12m~=. then ind_em_ur_adm_p12m=1;
 label ind_em_ur_adm_p12m="Ind any urgent or emergent hospital admission 12m post ivw";

 if n_em_admit_p12m=0 then ind_em_adm_p12m=0;
 if n_em_admit_p12m>0 & n_em_admit_p12m~=. then ind_em_adm_p12m=1;
 label ind_em_adm_p12m="Ind any emergency hospital admission 12m post ivw";

 if n_urgent_admit_p12m=0 then ind_ur_adm_p12m=0;
 if n_urgent_admit_p12m>0 & n_urgent_admit_p12m~=. then ind_ur_adm_p12m=1;
 label ind_ur_adm_p12m="Ind any urgent hospital admission 12m post ivw";

 if n_elect_admit_p12m =0 then ind_elect_adm_p12m=0;
 if n_elect_admit_p12m >0 & n_elect_admit_p12m ~=. then ind_elect_adm_p12m=1;
 label ind_elect_adm_p12m="Ind any elective hospital admission 12m post ivw";

 if (n_ip_admit_p12m - n_elect_admit_p12m)=0 then ind_nonelect_adm_p12m=0;
 if (n_ip_admit_p12m - n_elect_admit_p12m)>0 & n_elect_admit_p12m~=. then ind_nonelect_adm_p12m=1;
 label ind_nonelect_adm_p12m="Ind any non-elective hospital admission 12m post ivw";

 n_nonelect_adm_p12m=(n_ip_admit_p12m - n_elect_admit_p12m);
 label n_nonelect_adm_p12m="total n non-elective ip admit 12m post ivw";

 if n_ED_ip_p12m=0 then ind_ED_adm_p12m=0;
 if n_ED_ip_p12m>0 & n_ED_ip_p12m~=. then ind_ED_adm_p12m=1;
 label ind_ED_adm_p12m="Ind ED use with hospital admission 12m post ivw, from charges";

run;

 proc freq;
 table icu_days_p6m n_ip_admit_p6m n_hospd_p6m ind_hosp_adm_p6m n_em_urgent_admit_p6m ind_em_ur_adm_p6m 
	ind_em_adm_p6m ind_ur_adm_p6m ind_nonelect_adm_p6m n_nonelect_adm_p6m n_ED_ip_p6m ind_ED_adm_p6m 
	ind_em_adm_p6m*ind_ED_adm_p6m /missprint;
 run;

proc freq;
table icu_days_p12m n_ip_admit_p12m n_hospd_p12m ind_hosp_adm_p12m n_em_urgent_admit_p12m ind_em_ur_adm_p12m
	ind_em_adm_p12m ind_ur_adm_p12m ind_nonelect_adm_p12m n_nonelect_adm_p12m n_ED_ip_p12m ind_ED_adm_p12m 
	ind_em_adm_p12m*ind_ED_adm_p12m /missprint;
run;

/****************************************************************************/
/****************************************************************************/
/*Get SNF days, indicator for 12 months after the interview*/
/****************************************************************************/
/****************************************************************************/

/*pull list of snf claims from all medpar claims 12 months post-interview*/
data snf_meet_365;
set proj_int.snf_meet_365p;
run;

proc sort data=snf_meet_365;
by bene_id admit_date;
run;

data snf_meet_365_1a;
set snf_meet_365;
format admit_date date9. disch_date date9.;
run;

/*3 claim windows are present:
1. SNF stays fully within the 1 year before interview
2. Stays that begin before 1 year pre-core but end within 1 year pre-core
3. Stays that begin within 1 year of core but end after core ivw
4. Stays that begin before 1 year and end after interview, LOS=365!
Get claims that meet 1 *1797*/
proc sql;
create table snf_meet1_aft_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)<365 & (index_date - disch_date)>=0; 
quit;


/*meet time window 2 *152*/
proc sql;
create table snf_meet2_aft_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)>=365 & (index_date - disch_date)>=0; 
quit;

/*For these claims that start > 1 year before core, truncate start date so 
only count LOS days w/i 1 year
create indicator variable that claim start date is truncated*/
data snf_meet2_aft_365_1;
set snf_meet2_aft_365;
admit_date = index_date-365;
snf_admit_date_mod = 1;
label snf_admit_date_mod = "Admit date mod; at 12 mo from ivw date";
run;

proc freq;
table snf_admit_date_mod ;
run;

/*meet time window 3 *135 */
proc sql;
create table snf_meet3_aft_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)<365 & (index_date-disch_date)<0; 
quit;

/*For these claims that end after core, truncate end date so 
only count LOS days 1 year before the core
create indicator variable that claim end date is truncated*/
data snf_meet3_aft_365_1;
set snf_meet3_aft_365;
disch_date = index_date;
snf_disch_date_mod = 1;
label snf_disch_date_mod = "Disch date mod; at ivw date";
run;

proc freq;
table snf_disch_date_mod ;
run;

/*meet 4 , overlap both start and end dates n=7*/
proc sql;
create table snf_meet4_aft_365 as select *
from snf_meet_365_1a
where (index_date - admit_date)>=365 & (index_date - disch_date)<0; 
quit;

/*truncate both start and end dates so just count 1 year pre interview*/
data snf_meet4_aft_365_1;
set snf_meet4_aft_365;
disch_date = index_date;
snf_disch_date_mod = 1;
label snf_disch_date_mod = "Disch date mod; at ivw date";
admit_date = index_date-365;
snf_admit_date_mod = 1;
label snf_admit_date_mod = "Admit date mod; at 12 mo from ivw date";
run;

proc freq;
table snf_disch_date_mod snf_admit_date_mod;
run;


data snf_meet_aft_365;
set snf_meet1_aft_365 snf_meet2_aft_365_1 snf_meet3_aft_365_1 snf_meet4_aft_365_1;
run;

proc freq;
table snf_admit_date_mod snf_disch_date_mod ;
run;

/*save final files to project int_data directory*/
data proj_int.snf_meet_aft_365 ;
set  snf_meet_aft_365;
run;

/*************************************************************/
/*calculate total number of days spent in SNF by BID*/
/*************************************************************/

data aft_snf_days_1;
set proj_int.snf_meet_aft_365;
calc_snf_LOS=disch_date-admit_date;
if calc_snf_LOS=0 then calc_snf_LOS=1;
run;

proc sort data=aft_snf_days_1;
by bene_id index_date admit_date;
run;

proc sql;
create table snf_days_pre as select distinct bene_id,index_year,
sum(calc_snf_LOS)
	as n_snf_days_p12m
	from aft_snf_days_1 group by bene_id,index_year;
quit;


/*merge into full ffs 1yr, age 65+ dataset*/
proc sort data=snf_days_pre nodupkey;
by bene_id index_year;
run;



 data snf ;
 set snf_days_pre ;
 array list n_snf_days_p12m;
 do over list;
 if list=. then list=0;
 end; 

if n_snf_days_p12m=0 then ind_snf_use_p12m=0;
 if n_snf_days_p12m>0 & n_snf_days_p12m~=. then ind_snf_use_p12m=1;
 label ind_snf_use_p12m="Indicator for any SNF stay 12m post ivw";
 label n_snf_days_p12m="SNF Days 12m post ivw";

run;

/****************************************************************************/
/****************************************************************************/
/*Get indicator of ESRD codes from the denominator file the year of the interview*/
/****************************************************************************/
/****************************************************************************/
proc sort data=medi.mbsf_06_12 out=dn_2000_20122  nodupkey;
by bene_id year;
run;

/*pull ESRD status variable from dn file
for the core interview years*/
proc sql;
create table esrd1 as select
a.*,b.Bene_ESRD_IND from 
proj_int.index a left join
dn_2000_20122 b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and a.index_year=b.year;
quit;

proc freq;
table bene_esrd_ind /missprint;
run;

data esrd;
set esrd1 ;
if bene_esrd_ind='Y' then esrd_ind_n=1;
if bene_esrd_ind='0' then esrd_ind_n=0;
label esrd_ind_n="ESRD indicator from claims denominator file";
drop bene_esrd_ind;
run;

proc freq;
table esrd_ind_n /missprint;
run;

/****************************************************************************/
/*Get indicator of Home 02 use 12 months pre interview from DME claims*/
/****************************************************************************/
data oxygen1(keep=bene_id index_year oxygen);
set proj_int.dm_meet_365p;
oxygen=0;
if h_o2>0 then oxygen=1;
run;

proc sort data=oxygen1 out=oxygen nodupkey;
by bene_id index_year;
run;
proc contents data=medi.op_06_12; run;
data ed_op_1;
set proj_int.op_meet_365p(keep=bene_id admit_date disch_date index_date index_year erdaycnt);
if erdaycnt>0 then ed_op=1;
if erdaycnt=0 then ed_op=0;
run;

proc freq;
table ed_op;
run;

proc sql;
create table ed_op_2 as select distinct bene_id,index_year,
count(case when ed_op=1 then ed_op else . end)
	as n_ed_op_visits_p12m
	from ed_op_1 group by bene_id,index_year;
quit;

proc freq;
table n_ed_op_visits_p12m;
run;


proc sort data=ed_op_2 nodupkey;
by bene_id index_year;
run;


data ed ;
set ed_op_2;
if n_ed_op_visits_p12m=. and comorb_1_0_1yr~=. then n_ed_op_visits_p12m=0;
label n_ed_op_visits_p12m="Count ED OP visits, 1yr post ivw";

if n_ed_op_visits_p12m=0 then ind_ed_op_p12m=0;
if n_ed_op_visits_p12m>0 & n_ed_op_visits_p12m~=. then ind_ed_op_p12m=1;
label ind_ed_op_p12m="Indicator any ED OP visits, 1 yr post ivw";
run;

proc freq;
table n_ed_op_visits_p12m*ind_ed_op_p12m;
run;

proc sql;
create table proj_int.utilization_post as select * 
from proj_int.index a 
left join
ip b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year
left join 
snf c
on trim(left(a.bene_id))=trim(left(c.bene_id)) and a.index_year=c.index_year
left join 
esrd d
on trim(left(a.bene_id))=trim(left(d.bene_id)) and a.index_year=d.index_year
left join
oxygen e
on trim(left(a.bene_id))=trim(left(e.bene_id)) and a.index_year=e.index_year
left join 
ed f
on trim(left(a.bene_id))=trim(left(f.bene_id)) and a.index_year=f.index_year;
quit;

proc contents data=proj_int.utilization_post; 
run;

H="combine into one dataset"


H="tables"
local logpath "E:\nhats\data\Projects\Homebound\logs"
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", clear
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other"
label values doc_visit_cat doc_visit_cat
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
local cvars1 age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}
local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' `catvars3' `ivars2' `ivars3' n
di `rn'
levelsof doc_visit_cat, local(levels)
local r=1
local c=1
mat tab=J(`rn',11,.)
gen n=1
forvalues d=0/10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d'
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n
restore
frmttable using `logpath'\transport_to_dr.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Dr. not seen"  "Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked"  "Home Visit" ///
 "Other" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace
local r=1
local c=1
mat tab=J(`rn'+1,11,.)
forvalues d=0/10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
restore
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Dr. not seen"  "Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked"  "Home Visit" ///
 "Other" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable

gen missany=0
foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan

merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
local yvars ind_ed_vis_p12m ind_hosp_adm_p12m
local xvars i.agecat female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr didnotdrive
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using `logpath'\transport_to_dr.rtf, varlabels addtable replay


H="tables 9/21"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", clear
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other"
label values doc_visit_cat doc_visit_cat
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
local cvars1 age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}
local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' `catvars3' `ivars2' `ivars3' n
di `rn'
levelsof doc_visit_cat, local(levels)
local r=1
local c=1
mat tab=J(`rn',11,.)
gen n=1
forvalues d=0/10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d'
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n
restore
frmttable using `logpath'\transport_to_dr.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Dr. not seen"  "Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked"  "Home Visit" ///
 "Other" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace
local r=1
local c=1
mat tab=J(`rn'+1,11,.)
forvalues d=0/10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
restore
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Dr. not seen"  "Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked"  "Home Visit" ///
 "Other" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable

gen missany=0
foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan

merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
preserve
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos

local yvars ind_ed_vis_p12m ind_hosp_adm_p12m
local xvars i.agecat female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr didnotdrive
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using `logpath'\transport_to_dr.rtf, varlabels addtable replay
restore
drop if reg_doc_seen==0 | inlist(doc_visit_cat,8,9)
tempfile orig
save `orig'
levelsof doc_visit_cat, local(levels)
local r=1
local c=1
mat tab=J(`rn',11,.)

foreach d in 1 2 3 4 5 6 7 10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d'
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n
restore
frmttable using `logpath'\transport_to_dr_sens1.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("""Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace
local r=1
local c=1
mat tab=J(`rn'+1,11,.)
foreach d in 1 2 3 4 5 6 7 10 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
restore
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr_sens1.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Drove"  "Got Ride"  "Van,from place lives" ///
 "Van,srs & disabled"  "Public Transit" "Taxi" "Walked" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable


foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan


drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos

local yvars ind_ed_vis_p12m ind_hosp_adm_p12m
local xvars i.agecat female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr didnotdrive
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using `logpath'\transport_to_dr_sens1.rtf, varlabels addtable replay

use `orig', clear
drop if reg_doc_seen==0 | doc_visit_cat==9
keep if inlist(doc_visit_cat,1,2)
levelsof doc_visit_cat, local(levels)
local r=1
local c=1
mat tab=J(`rn',11,.)

forvalues d=1/2 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d'
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr_sens2.rtf, statmat(tab) sdec(2) varlabels ///
ctitles(""  "Drove"  "Got Ride" ) title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace
local r=1
local c=1
mat tab=J(`rn'+1,11,.)
forvalues d=1/2 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr_sens2.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Drove"  "Got Ride"  ) title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable


foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos

local yvars ind_ed_vis_p12m ind_hosp_adm_p12m
local xvars i.agecat female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr doc_visit_cat
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using `logpath'\transport_to_dr_sens2.rtf, varlabels addtable replay

use `orig', clear
drop if reg_doc_seen==0 | doc_visit_cat==9 | doc_visit_cat==8
gen self_reliant=inlist(doc_visit_cat,1,5,6,7)
replace self_reliant=0 if inlist(doc_visit_cat,5,6) & homebound_cat!=4
label drop doc_visit_cat
replace doc_visit_cat=self_reliant
label define doc_visit_cat 0 "Not self-reliant" 1 "Self-reliant"

levelsof doc_visit_cat, local(levels)
local r=1
local c=1
mat tab=J(`rn',11,.)

forvalues d=0/1 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d'
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d'
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr_sens3.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Not self-reliant" "Self Reliant") title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace
local r=1
local c=1
mat tab=J(`rn'+1,11,.)
forvalues d=0/1 {
	if "`d'"=="10" {
		preserve
		replace doc_visit_cat=10
}
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using `logpath'\transport_to_dr_sens3.rtf, statmat(tab) sdec(2) varlabels ///
ctitles("" "Not self-reliant" "Self-reliant") title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable

foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos

local yvars ind_ed_vis_p12m ind_hosp_adm_p12m
local xvars i.agecat female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr doc_visit_cat
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using `logpath'\transport_to_dr_sens3.rtf, varlabels addtable replay


H="tables FFS only "
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", clear
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other"
label values doc_visit_cat doc_visit_cat
gen self_reliant=inlist(doc_visit_cat,1,5,6,7)
replace self_reliant=0 if inlist(doc_visit_cat,5,6) & homebound_cat!=4
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
local cvars1 //age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever died_12
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}

local xv didnotdrive


forvalues timethrough=1/4 {
	if `timethrough'==1 {
		preserve
		local note "Includes SPs w/ 12m FFS prior to interview and complete answer on transportation to doctor"
		local cols "Dr. Not Seen" "Drove"  "Got Ride"  "Van,from place lives" "Van,srs & disabled"  "Public Transit" "Taxi" "Walked" ///
		"Home Visit" "Other"
		local doc 
}
	if `timethrough'==2 {
		preserve
		drop if reg_doc_seen==0 | inlist(doc_visit_cat,8,9)
		local note "Includes SPs w/ 12m FFS prior to interview, excluding those with no regular Dr visit/home visit/other transportation method"
		local doc excl_novisits_
		local cols "Drove"  "Got Ride"  "Van,from place lives" "Van,srs & disabled"  "Public Transit" "Taxi" "Walked"
}
	if `timethrough'==3 {
		preserve
		keep if inlist(doc_visit_cat,1,2)
		local note "Includes SPs w/ 12m FFS prior to interview, only those who drove or got a ride"
		local cols "Drove" "Got a ride"
		local doc drove_v_ride_
}
	if `timethrough'==4 {
		preserve
		drop if reg_doc_seen==0 | doc_visit_cat==9 | doc_visit_cat==8
		label drop doc_visit_cat
		replace doc_visit_cat=!self_reliant
		label define doc_visit_cat 0 "Self-reliant" 1 "Reliant on others"
		local note "Includes SPs w/ 12m FFS prior to interview, excluding those with no regular Dr visit/home visit/other transportation method" ///
		"Self-reliant if drove or walked, or took taxi/public transit if not homebound"
		local doc self_reliant_
		label var doc_visit_cat "Reliant on others"
		local cols "Self-Reliant" "Reliant on others"
		local xv doc_visit_cat
}



local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' `catvars3' `ivars2' `ivars3' n
di `rn'
levelsof doc_visit_cat, local(levels)
local cn : word count `levels' 1
di `cn'

local r=1
local c=1
mat tab=J(`rn',`cn',.)
gen n=1
gen groupfull=1
foreach d in `levels' full {
if "`d'"!="full" gen group`d'=doc_visit_cat==`d'
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		foreach x in `catvars`i'' `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\transport_to_dr_`doc'ffs.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 replace note(`note')
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn',.)
foreach d in `levels' full {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\transport_to_dr_`doc'ffs.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr., weighted") ///
 addtable

gen missany=0
foreach x in `cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' {
qui replace missany=1 if `x'==.
qui sum n if `x'==.
if r(N)>0 di "`x'" r(N)
}
tab missan


local yvars ind_ed_vis_p12m ind_hosp_adm_p12m died_12
local xvars `xv' i.agecat* female black hisp other_race income_cat1 income_cat2 income_cat3 ///
 education1 education2 education3 adl_impair iadl_impair homebound_cat1 homebound_cat2 ///
 homebound_cat3 el_ge3_comorb_1yr 
 outreg, clear
foreach x in `yvars' {
	logit `x' `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

svyset varunit [pw=anfin], strat(varstrat)
foreach x in `yvars' {
	svy: logit `x' `xvars', or
	*qui outreg, merge stats(e_b p) varlabels
	*estat ic
	linktest
	*predict p`x'
}

outreg using "`logpath'\transport_to_dr_`doc'ffs.rtf", varlabels addtable replay
restore
}




H="tab other transport vars"
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
capture log close

use "E:\nhats\data\NHATS Public\round_1\NHATS_Round_1_SP_File.dta" if r1dresid<3, clear

gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
}
label var barrier "Any transportation barrier"

log using "`logpath'\transport_tabs_barrier_crosstab.txt", text replace

tab barrier
tab dt1oftedrive barrier

forvalues i=1/7 {
tab dt1getoplcs`i' barrier
}

log close


use "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", clear
keep if wave==1 & sp_ivw_yes==1
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
merge 1:1 spid using "E:\nhats\data\NHATS Public\round_1\NHATS_Round_1_SP_File.dta", keep(match master) gen(m2)
merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m) keepusing(*ffs*)
duplicates drop spid *ffs*, force


log using "`logpath'\transport_tabs.txt", text replace
*foreach x in 0 1 {
	foreach x of varlist dt1oftedrive dt1lastdrove dt1avoidriv* dt1getoplcs* pa1trkpfrvis pa1trprrelsr pa1imprelser pa1trprkpfgr pa1imparclub pa1trprgoout pa1impouteny {
		di "Full Sample"
		tab `x'
		di "12m FFS w/ doc info only"
		tab `x' if cont_ffs_n_mos>=12 & cont_ffs_p_mos & !missing(doc_visit_cat)
}

log close
	foreach x of varlist dt1oftedrive dt1lastdrove dt1avoidriv* dt1getoplcs* pa1trkpfrvis pa1trprrelsr pa1imprelser pa1trprkpfgr pa1imparclub pa1trprgoout pa1impouteny {
*local lab : label `x'
*label define `x'2 `lab' -25 "DK/DN/Inapplicable/Missing"
*label values `x' `x2'
*replace `x'=. if `x'<0
}


log using "`logpath'\transport_tabs_shareable.txt", text replace
*foreach x in 0 1 {
	foreach x of varlist dt1oftedrive dt1lastdrove dt1avoidriv* dt1getoplcs* pa1trkpfrvis pa1trprrelsr pa1imprelser pa1trprkpfgr pa1imparclub pa1trprgoout pa1impouteny {
		di "Full Sample"
		tab `x'
		qui replace `x'=. if `x'<0
		di "12m FFS w/ doc info only"
		tab `x' if cont_ffs_n_mos>=12 & cont_ffs_p_mos & !missing(doc_visit_cat),m
}

log close



H="table 1 drive/transport/trouble"
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
capture log close
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'
use "E:\nhats\data\NHATS Public\round_1\NHATS_Round_1_SP_File.dta" if r1dresid<3, clear

gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv4
gen missall=1
foreach x in `probs' {
replace barrier=1 if `x'==1
replace `x'=. if `x'<0
replace missall=0 if !missing(`x')
}

forvalues i=1/7 {
local gets `gets' dt1getoplcs`i'
replace dt1getoplcs`i'=. if dt1getoplcs`i'<0
}

describe `avoids'

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
	replace missall=0 if !missing(`x')
}
replace dt1avoidriv3=. if dt1avoidriv3<0
local avoids `avoids' dt1avoidriv3
tab1 `avoids' `probs' `gets'
foreach x in `avoids' `probs' `gets' {
replace `x'=`x'==1 if !missing(`x')
}
gen transp_cat=avoids+1
replace transp_cat=barrier+3 if missing(transp_cat)
replace transp_cat=. if missall==1
label var transp_cat "Transportation Category"
label define transp_cat 1 "Drives, no avoidance" 2 "Avoids driving alone/at night/in weather" ///
3 "Does not drive, no barrier" 4 "Transportation barrier"
label values transp_cat transp_cat
label var barrier "Any transportation barrier"
label var avoids "Avoids driving alone/at night/in weather"


log using "`logpath'\transport_tabs_barrier_crosstab.txt", text replace

tab barrier
tab avoids
tab missall
tab transp_cat
tab dt1oftedrive transp_cat

forvalues i=1/7 {
	forvalues j=1/4 {
		tab dt1getoplcs`i' if transp_cat==`j'
}
}

log close

keep spid `avoids' `probs' `gets' barrier missall transp_cat avoids drives

merge 1:m spid using "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", nogen
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos
duplicates drop spid, force
label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other"
label values doc_visit_cat doc_visit_cat
gen self_reliant=inlist(doc_visit_cat,1,5,6,7)
replace self_reliant=0 if inlist(doc_visit_cat,5,6) & homebound_cat!=4
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen notdrives=!drives
label var notdrives "Does not drive"
local ivars2 drives avoids notdrives barrier `probs' `avoids' `gets' 

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}

foreach timethrough in 2 {
	if `timethrough'==2 {
		preserve
		drop if missall==1 | cont_ffs_n_mos<12 | cont_ffs_p_mos==0
		local note "Includes SPs w/ 12m FFS prior to interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local doc
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
}


local rn : word count `ivars2' n
di `rn'
levelsof transp_cat, local(levels)
local cn : word count `levels' 1
di `cn'

local r=1
local c=1
mat tab=J(`rn',`cn',.)
gen n=1
gen groupfull=1
foreach d in `levels' full {
if "`d'"!="full" gen group`d'=transp_cat==`d'
	forvalues i=1/3 {
		/*foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}*/
		foreach x in `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*r(N)
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`ivars2'
frmttable using "`logpath'\drives_transp_problem_`doc'ffs.rtf", statmat(tab) sdec(0) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of/Barrier to transport (N yes)") ///
 replace note("`note'")
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn',.)
foreach d in `levels' full {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem_`doc'ffs.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable

restore
}


local cvars1 //age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres /*device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any*/ has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever died_12
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}

local xv didnotdrive

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}

foreach timethrough in 2 {
	if `timethrough'==1 {
		preserve
		drop if missall==1
		local note "Includes all SPs with R1 interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
		local doc 
}
	if `timethrough'==2 {
		preserve
		drop if missall==1 | cont_ffs_n_mos<12 | cont_ffs_p_mos==0
		local note "Includes SPs w/ 12m FFS prior to interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local doc
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
}
	if `timethrough'==3 {
		preserve
		keep if inlist(doc_visit_cat,1,2)
		local note "Includes SPs w/ 12m FFS prior to interview, only those who drove or got a ride"
		local cols "Drove" "Got a ride"
		local doc drove_v_ride_
}
	if `timethrough'==4 {
		preserve
		drop if reg_doc_seen==0 | doc_visit_cat==9 | doc_visit_cat==8
		label drop doc_visit_cat
		replace doc_visit_cat=!self_reliant
		label define doc_visit_cat 0 "Self-reliant" 1 "Reliant on others"
		local note "Includes SPs w/ 12m FFS prior to interview, excluding those with no regular Dr visit/home visit/other transportation method" ///
		"Self-reliant if drove or walked, or took taxi/public transit if not homebound"
		local doc self_reliant_
		label var doc_visit_cat "Reliant on others"
		local cols "Self-Reliant" "Reliant on others"
		local xv doc_visit_cat
}



local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' `catvars3' `ivars2' `ivars3' n
di `rn'
levelsof transp_cat, local(levels)
local cn : word count `levels' 1
di `cn'

local r=1
local c=1
mat tab=J(`rn'-3,`cn',.)
gen n=1
gen groupfull=1
foreach d in `levels' full {
if "`d'"!="full" gen group`d'=transp_cat==`d'
	forvalues i=1/3 {
		/*foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*r(N)
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=/*`cvars1'*/ `catvars1' /*`cvars2'*/ `catvars2' `ivars2' /*`cvars3'*/ `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem_`doc'ffs.rtf", statmat(tab) sdec(0) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of/Barrier to transport (N yes)") ///
 addtable note("`note'")
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn',.)
foreach d in `levels' full {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem_`doc'ffs.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "`cols'" "Full Sample") title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable

restore
}




H="table 1 dtt incl outcomes"
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
capture log close
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'
use "E:\nhats\data\NHATS Public\round_1\NHATS_Round_1_SP_File.dta" if r1dresid<3, clear

gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout 
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv3 dt1avoidriv4
gen missall=1
foreach x in `probs' {
replace barrier=1 if `x'==1
replace `x'=. if `x'<0
replace missall=0 if !missing(`x')
}

forvalues i=1/7 {
local gets `gets' dt1getoplcs`i'
replace dt1getoplcs`i'=. if dt1getoplcs`i'<0
}

describe `avoids'

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
	replace missall=0 if !missing(`x')
}

local avoids `avoids' 
tab1 `avoids' `probs' `gets'
foreach x in `avoids' `probs' `gets' {
replace `x'=`x'==1 if !missing(`x')
}
gen transp_cat=avoids+1
replace transp_cat=barrier+3 if missing(transp_cat)
replace transp_cat=. if missall==1
label var transp_cat "Transportation Category"
label define transp_cat 1 "Drives, no avoidance" 2 "Avoids driving alone/night/weather/hwys" ///
3 "Does not drive, no barrier" 4 "Transportation barrier"
label values transp_cat transp_cat
label var barrier "Any transportation barrier"
label var avoids "Avoids driving alone/night/weather/hwys"

log using "`logpath'\transport_tabs_barrier_crosstab.txt", text replace

tab barrier
tab avoids
tab missall
tab transp_cat
tab dt1oftedrive transp_cat

forvalues i=1/7 {
	forvalues j=1/4 {
		tab dt1getoplcs`i' if transp_cat==`j'
}
}

log close

keep spid `avoids' `probs' `gets' barrier missall transp_cat avoids drives

merge 1:m spid using "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", nogen
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
*drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos
duplicates drop spid, force
replace doc_visit_cat=10 if missing(doc_visit_cat)
label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other" 10 "Unknown/Missing"
label values doc_visit_cat doc_visit_cat
tab doc_visit_cat, gen(dcc)
gen self_reliant=inlist(doc_visit_cat,1,5,6,7)
replace self_reliant=0 if inlist(doc_visit_cat,5,6) & homebound_cat!=4


svyset [pw=anfin]
forvalues i=1/10 {
	local doc_visit_cat `doc_visit_cat' dcc`i'
}

merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
label var died_12 "Died 12m post-interview"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen notdrives=!drives
label var notdrives "Does not drive"
local ivars2 drives avoids notdrives barrier `probs' `avoids' `gets' `doc_visit_cat'

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}
drop if missall
foreach timethrough in 1 2 {
	preserve
	local note "Includes all SP interviws w/ nonmissing answer on at least one of avoids driving or transportation barrier"
	local doc
	local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"

	if `timethrough'==2 {

		drop if missall==1 | cont_ffs_n_mos<12 | cont_ffs_p_mos==0
		local note "Includes SPs w/ 12m FFS prior to interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local doc _ffs
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
}


local rn : word count `ivars2' n
di `rn'
levelsof transp_cat, local(levels)
local cn : word count `levels' 1
di `cn'

local r=1
local c=1
mat tab=J(`rn',`cn',.)
gen n=1
gen groupfull=1
foreach d in full `levels' {
if "`d'"!="full" gen group`d'=transp_cat==`d'
	forvalues i=1/3 {
		/*foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}*/
		foreach x in `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*r(N)
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=`ivars2'
frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(0) varlabels ///
ctitles("" "Full Sample" "`cols'") title("Sample Characteristics by Mode of/Barrier to transport (N yes)") ///
 replace note("`note'")
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn',.)
mat stars=J(`rn'+1,`cn',0)

foreach d in full `levels' {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
/*			if inlist("`d'","2","3","4") {
				svy: mean `x' if group`d'==1 | group`1'==1, by(group`d')
				test `x'
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01) 
}*/
			local r=`r'+1
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
/*		if inlist("`d'","2","3","4") {
				svy: tab `x' group`d' if group`d'==1 | group`i'==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.01)+(e(p_Pear)<.05)
}*/
				local r=`r'+1
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
}
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "Full Sample" "`cols'") title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable note(`note')

restore
}



local cvars1 //age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars1 female
local ivars2 adl_independent iadl_independent `doc_visit_cat'
local ivars3 rcfres /*device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any*/ has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever died_12
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}

local xv didnotdrive

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}

foreach timethrough in 1 2 {
	if `timethrough'==1 {
		preserve
		drop if missall==1
		local note "Includes all SPs with R1 interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
		local doc 
}
	if `timethrough'==2 {
		preserve
		drop if missall==1 | cont_ffs_n_mos<12 | cont_ffs_p_mos==0
		local note "Includes SPs w/ 12m FFS prior to interview and nonmissing answer on at least one of avoids driving or transportation barrier"
		local doc _ffs
		local cols "`tcat1'" "`tcat2'" "`tcat3'" "`tcat4'"
}
	if `timethrough'==3 {
		preserve
		keep if inlist(doc_visit_cat,1,2)
		local note "Includes SPs w/ 12m FFS prior to interview, only those who drove or got a ride"
		local cols "Drove" "Got a ride"
		local doc drove_v_ride_
}
	if `timethrough'==4 {
		preserve
		drop if reg_doc_seen==0 | doc_visit_cat==9 | doc_visit_cat==8
		label drop doc_visit_cat
		replace doc_visit_cat=!self_reliant
		label define doc_visit_cat 0 "Self-reliant" 1 "Reliant on others"
		local note "Includes SPs w/ 12m FFS prior to interview, excluding those with no regular Dr visit/home visit/other transportation method" ///
		"Self-reliant if drove or walked, or took taxi/public transit if not homebound"
		local doc self_reliant_
		label var doc_visit_cat "Reliant on others"
		local cols "Self-Reliant" "Reliant on others"
		local xv doc_visit_cat
}



local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' `catvars3' `ivars1' `ivars2' `ivars3' n
di `rn'
levelsof transp_cat, local(levels)
local cn : word count `levels' 1 
di `cn'

local r=1
local c=1
mat tab=J(`rn'-3,`cn',.)
mat stars=J(`rn'-3,`cn',0)
gen n=1
gen groupfull=1
foreach d in full `levels' {
if "`d'"!="full" gen group`d'=transp_cat==`d'
	forvalues i=1/3 {
		/*foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*r(N)
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=/*`cvars1'*/ `catvars1' `ivars1' /*`cvars2'*/ `catvars2' `ivars2' /*`cvars3'*/ `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(0) varlabels ///
ctitles("" "Full Sample" "`cols'") title("Sample Characteristics by Mode of/Barrier to transport (N yes)") ///
 addtable note("`note'")
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn'*2,.)
mat stars=J(`rn'+1,`cn'*2,0)
foreach d in full `levels' {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			if inlist("`d'","2","3","4") {
				svy: mean `x' if group`d'==1 | group1==1, over(group1)
				test [`x']0=[`x']1
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.01)+(r(p)<.05)
}		
			local r=`r'+1
			di "`r'"
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if inlist("`d'","2","3","4") {
				svy: tab `x' group1 if group`d'==1 | group1==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=((e(p_Pear)<.01)+(e(p_Pear)<.05))
}
			local r=`r'+1
			di `r'
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+2
	di "Column=`c'"
}
mat rownames tab=`cvars1' `catvars1' `ivars1' `cvars2' `catvars2' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(2) ///
 varlabels ///
ctitles("" "Full Sample" "`cols'") title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable substat(1) annotate(stars) asymbol(*,**) ///
 note("`note'" "P-values from T-tests or Chi2")

restore
}


egen tot_paid_by_mc_p12m=rowtotal(*_paid_by_mc_12m)
gen icu_ind_p12m=icu_days_p12m>0 if !missing(icu_days_p12m)
label var tot_paid_by_mc_p12m "Total Medicare Expenditures 12m post interview"
label var icu_ind_p12m "Any ICU use 12m post interview"
local coutcomes tot_paid_by_mc_p12m 
local ioutcomes ind_hosp_adm_p12m ind_ed_vis_p12m icu_ind_p12m ///
died_12 

sum `coutcomes' `ioutcomes'
preserve
keep if cont_ffs_n_mos>=12 & cont_ffs_p_mos & !missall

local rn : word count `coutcomes' `coutcomes' `ioutcomes' 
local r=1
local c=1
mat tab=J(`rn'+1,10,.)
mat stars=J(`rn'+1,10,0)
levelsof transp_cat, local(levels)

gen groupfull=1
gen n=1
foreach d in full `levels' {
	if "`d'"!="full" gen group`d'=transp_cat==`d'
		foreach x in `coutcomes' {
		di "`x'"
			sum `x' if group`d'==1 [aw=anfinw],d
			mat tab[`r',`c']=r(mean)
			mat tab[`r'+1,`c']=r(p50)
			if inlist("`d'","2","3","4") {
				svy: mean `x' if group`d'==1 | group1==1, over(group1)
				test [`x']0=[`x']1
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.01)+(r(p)<.05)
}		
			local r=`r'+2
			di "`r'"
}
		foreach x in `ioutcomes' {
			di "`x'"
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if inlist("`d'","2","3","4") {
				svy: tab `x' group1 if group`d'==1 | group1==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.01)+(e(p_Pear)<.05)
}
			local r=`r'+1
			di `r'
}

	sum n if group`d'==1 [aw=anfinw]
	*mat tab[`r',`c']=r(sum)
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+2
	di "Column=`c'"
}
mat rownames tab="Total Medicare Expenditures" "Median" `ioutcomes' N

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(2) ///
 varlabels ///
ctitles("" "Full Sample" "`cols'") title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable substat(1) annotate(stars) asymbol(*,**) ///
 note("`note'" "P-values from T-tests or Chi2")
restore

tempfile t1
save `t1'
keep if transp_cat>2
foreach timethrough in 1 2 {
	if `timethrough'==1 {
		preserve
		drop if missall==1
		local note "Includes all SPs with R1 interview and nonmissing answer on transportation barrier"
		local cols "`tcat3'" "`tcat4'"
		local doc 
}
	if `timethrough'==2 {
		preserve
		drop if missall==1 | cont_ffs_n_mos<12 | cont_ffs_p_mos==0
		local note "Includes SPs w/ 12m FFS prior to interview and nonmissing answer on transportation barrier"
		local doc _ffs
		local cols "`tcat3'" "`tcat4'"
}
	if `timethrough'==3 {
		preserve
		keep if inlist(doc_visit_cat,1,2)
		local note "Includes SPs w/ 12m FFS prior to interview, only those who drove or got a ride"
		local cols "Drove" "Got a ride"
		local doc drove_v_ride_
}
	if `timethrough'==4 {
		preserve
		drop if reg_doc_seen==0 | doc_visit_cat==9 | doc_visit_cat==8
		label drop doc_visit_cat
		replace doc_visit_cat=!self_reliant
		label define doc_visit_cat 0 "Self-reliant" 1 "Reliant on others"
		local note "Includes SPs w/ 12m FFS prior to interview, excluding those with no regular Dr visit/home visit/other transportation method" ///
		"Self-reliant if drove or walked, or took taxi/public transit if not homebound"
		local doc self_reliant_
		label var doc_visit_cat "Reliant on others"
		local cols "Self-Reliant" "Reliant on others"
		local xv doc_visit_cat
}



local rn : word count `cvars1' `cvars2' `cvars3' `catvars1' `catvars2' ///
 `catvars3' `ivars1' `ivars2' `ivars3' n
di `rn'
levelsof transp_cat, local(levels)
local cn : word count `levels' 1 
di `cn'

local r=1
local c=1
mat tab=J(`rn'-3,`cn',.)
mat stars=J(`rn'-3,`cn',0)
gen n=1
gen groupfull=1
foreach d in `levels' {
if "`d'"!="full" gen group`d'=transp_cat==`d'
	forvalues i=1/3 {
		/*foreach x in `cvars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)
			local r=`r'+1
}*/
		foreach x in `catvars`i'' `ivars`i'' {
			qui sum `x' if group`d'==1
			mat tab[`r',`c']=r(mean)*r(N)
			local r=`r'+1
}
}
	sum n if group`d'==1
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
}

mat rownames tab=/*`cvars1'*/ `catvars1' /*`cvars2'*/ `catvars2' `ivars2' /*`cvars3'*/ `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(0) varlabels ///
ctitles("" "`cols'" ) title("Sample Characteristics by Mode of/Barrier to transport (N yes)") ///
 addtable note("`note'")
 
local r=1
local c=1
mat tab=J(`rn'+1,`cn'*2,.)
mat stars=J(`rn'+1,`cn'*2,0)
foreach d in `levels' {
	forvalues i=1/3 {
		foreach x in `cvars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			if "`d'"!="3" {
				svy: mean `x' , over(group`d')
				test [`x']0=[`x']1
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.01)+(r(p)<.05)
}		
			local r=`r'+1
			di "`r'"
}
		foreach x in `catvars`i'' `ivars`i'' {
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if "`d'"!="3" {
				svy: tab `x' group`d'
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=((e(p_Pear)<.01)+(e(p_Pear)<.05))
}
			local r=`r'+1
			di `r'
}
}
	sum n if group`d'==1 [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+1
	di "Column=`c'"
}
mat rownames tab=`cvars1' `catvars1' `cvars2' `catvars2' `ivars1' `ivars2' `cvars3' `catvars3' `ivars3' n

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(2) ///
 varlabels ///
ctitles("" "`cols'" ) title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable  annotate(stars) asymbol(*,**) ///
 note("`note'" "P-values from T-tests or Chi2")

restore
}


label var tot_paid_by_mc_p12m "Total Medicare Expenditures 12m post interview"
label var icu_ind_p12m "Any ICU use 12m post interview"
local coutcomes tot_paid_by_mc_p12m 
local ioutcomes ind_hosp_adm_p12m ind_ed_vis_p12m icu_ind_p12m ///
died_12 

sum `coutcomes' `ioutcomes'
preserve
keep if cont_ffs_n_mos>=12 & cont_ffs_p_mos & !missall

local rn : word count `coutcomes' `coutcomes' `ioutcomes' 
local r=1
local c=1
mat tab=J(`rn'+1,10,.)
mat stars=J(`rn'+1,10,0)
levelsof transp_cat, local(levels)

gen groupfull=1
gen n=1
foreach d in `levels' {
	if "`d'"!="full" gen group`d'=transp_cat==`d'
		foreach x in `coutcomes' {
		di "`x'"
			sum `x' if group`d'==1 [aw=anfinw],d
			mat tab[`r',`c']=r(mean)
			mat tab[`r'+1,`c']=r(p50)
			if "`d'"!="3" {
				svy: mean `x' , over(group`d')
				test [`x']0=[`x']1
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.01)+(r(p)<.05)
}		
			local r=`r'+2
			di "`r'"
}
		foreach x in `ioutcomes' {
			di "`x'"
			sum `x' if group`d'==1 [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if "`d'"!="3" {
				svy: tab `x' group`d'
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.01)+(e(p_Pear)<.05)
}
			local r=`r'+1
			di `r'
}

	sum n if group`d'==1 [aw=anfinw]
	*mat tab[`r',`c']=r(sum)
	mat tab[`r',`c']=r(N)
	local r=1
	local c=`c'+1
	di "Column=`c'"
}
mat rownames tab="Total Medicare Expenditures" "Median" `ioutcomes' N

frmttable using "`logpath'\drives_transp_problem`doc'.rtf", statmat(tab) sdec(2) ///
 varlabels ///
ctitles("" "`cols'" ) title("Sample Characteristics by Mode of/Barrier to transport, weighted (mean/% yes)") ///
 addtable annotate(stars) asymbol(*,**) ///
 note("`note'" "P-values from T-tests or Chi2")

use `t1',clear 


H="dtt logits"
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
capture log close
use "E:\nhats\data\NHATS cleaned\op_round_1_4.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'
use "E:\nhats\data\NHATS Public\round_1\NHATS_Round_1_SP_File.dta" if r1dresid<3, clear

gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout 
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv3 dt1avoidriv4
gen missall=1
foreach x in `probs' {
replace barrier=1 if `x'==1
replace `x'=. if `x'<0
replace missall=0 if !missing(`x')
}

forvalues i=1/7 {
local gets `gets' dt1getoplcs`i'
replace dt1getoplcs`i'=. if dt1getoplcs`i'<0
}

describe `avoids'

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
	replace missall=0 if !missing(`x')
}

local avoids `avoids' 
tab1 `avoids' `probs' `gets'
foreach x in `avoids' `probs' `gets' {
replace `x'=`x'==1 if !missing(`x')
}
gen transp_cat=avoids+1
replace transp_cat=barrier+3 if missing(transp_cat)
replace transp_cat=. if missall==1
label var transp_cat "Transportation Category"
label define transp_cat 1 "Drives, no avoidance" 2 "Avoids driving alone/night/weather/hwys" ///
3 "Does not drive, no barrier" 4 "Transportation barrier"
label values transp_cat transp_cat
label var barrier "Any transportation barrier"
label var avoids "Avoids driving alone/night/weather/hwys"

log using "`logpath'\transport_tabs_barrier_crosstab.txt", text replace

tab barrier
tab avoids
tab missall
tab transp_cat
tab dt1oftedrive transp_cat

forvalues i=1/7 {
	forvalues j=1/4 {
		tab dt1getoplcs`i' if transp_cat==`j'
}
}

log close

keep spid `avoids' `probs' `gets' barrier missall transp_cat avoids drives

merge 1:m spid using "E:\nhats\data\nhats Cleaned\sp_round_1_4.dta", nogen
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
merge 1:m spid wave using "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", keep(match master) gen(m)
gen ind_ed_vis_p12m=n_ed_ip_p12m>=1 | n_ed_op_visits_p12m>=1 
label var ind_ed_vis_p12m "Indicator any ED visit (OP or IP) 12m post ivw"
gen drove = howgetdoc==1
label var drove "Drove to Dr's office"
gen didnotdrive=!drove
label var didnotdrive "Did not drive to Dr's office"
*drop if cont_ffs_n_mos<12 | !cont_ffs_p_mos
duplicates drop spid, force
replace doc_visit_cat=10 if missing(doc_visit_cat)
label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from place lives" ///
4 "Van/Shuttle for Seniors & Disabled" 5 "Public Transit" 6 "Taxi" 7 "Walked" 8 "Home Visit" ///
9 "Other" 10 "Unknown/Missing"
label values doc_visit_cat doc_visit_cat
tab doc_visit_cat, gen(dcc)
gen self_reliant=inlist(doc_visit_cat,1,5,6,7)
replace self_reliant=0 if inlist(doc_visit_cat,5,6) & homebound_cat!=4


svyset [pw=anfin]
forvalues i=1/10 {
	local doc_visit_cat `doc_visit_cat' dcc`i'
}

merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi)

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
label var died_12 "Died 12m post-interview"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen notdrives=!drives
label var notdrives "Does not drive"
local ivars2 drives avoids notdrives barrier `probs' `avoids' `gets' `doc_visit_cat'

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}
drop if missall



local cvars1 //age
local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 homebound_cat maritalstat
local ivars1 female
local ivars2 adl_independent iadl_independent `doc_visit_cat'
local ivars3 rcfres /*device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any*/ has_doc_help sr_diabetes_ever sr_ami_ever ///
sr_lung_dis_ever ///
sr_htn_ever died_12
foreach x in `catvars1' `catvars2' `catvars3' {
	tab `x', gen(`x')
	*drop `x'
}
forvalues i=1/3{
	local v ""
	foreach x in `catvars`i'' {
		foreach y of varlist `x'* {
			local v `v' `y'
}
}		
local catvars`i' `v'
}

local xv didnotdrive

forvalues i=1/4 {
local tcat`i' : label transp_cat `i'
}



egen tot_paid_by_mc_p12m=rowtotal(*_paid_by_mc_12m)
gen icu_ind_p12m=icu_days_p12m>0 if !missing(icu_days_p12m)
label var tot_paid_by_mc_p12m "Total Medicare Expenditures 12m post interview"
label var icu_ind_p12m "Any ICU use 12m post interview"
local coutcomes tot_paid_by_mc_p12m 
local ioutcomes ind_hosp_adm_p12m ind_ed_vis_p12m icu_ind_p12m ///
died_12 

sum `coutcomes' `ioutcomes'
keep if cont_ffs_n_mos>=12 & cont_ffs_p_mos & !missall

local rn : word count `coutcomes' `coutcomes' `ioutcomes' 
local r=1
local c=1
mat tab=J(`rn'+1,10,.)
mat stars=J(`rn'+1,10,0)
levelsof transp_cat, local(levels)


local yvars ind_hosp_adm_p12m ind_ed_vis_p12m died_12 
local xvars i.agecat i.female i.marriedpartnered i.race_cat i.income_cat i.education ///
i.adl_independent i.iadl_independent i.el_ge3_comorb_1yr i.sr_diabetes_ever i.sr_ami_ever ///
i.sr_lung_dis_ever ///
i.sr_htn_ever

local satvars i.female
foreach x of local xvars {
	local satvars `satvars'##`x'
}

///age cat, sex, married, white/blcack/hisp/oth, inc by 15k (base 60+),
///ed(lths base), adl help, iadl help, elix 3+, sr diabetes, sr heart attack,
///sr lung, sr high bp, residential care (not nh)
cap log close
log using "`logpath'\transport_logits.txt", text replace
foreach d in 0 1 {
	outreg, clear
	foreach x of local yvars {
		logit `x' i.transp_cat `xvars' if drive==`d', or
		qui outreg, merge varlabels stats(e_b p)
}
	qui outreg using "`logpath'\transport_logits_drive`d'.rtf", replace replay 
}

log close


H="tables 7/13/17"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
cd "`logpath'"

use "E:\nhats\data\NHATS cleaned\op_round_1_5.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_5.dta", clear
svyset [pw=anfinwgt]
gen w2hosp=sr_hosp_ind if wave==2
by spid, sort: egen ind_hosp_2=max(w2hosp)
replace w2hosp=. if lml==1 
by spid, sort: egen ind_hosp_2_surv=max(w2hosp)
gen w2doc=reg_doc_seen==1 if wave==2
by spid: egen ind_doc_2=max(w2doc)
replace w2doc=. if lml==1
by spid: egen ind_doc_2_surv=max(w2doc)
label var ind_doc_2 "SR seen regular doc at wave 2"
label var ind_doc_2_surv "Sr seen regular doc at wave 2 (survivors only)"
label var ind_hosp_2 "SR hospitalization at wave 2"
label var ind_hosp_2_surv "SR hospitalization at wave 2 (survivors only)"
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
gen n=1

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from home or for seniors" ///
4 "Public Transit" 5 "Taxi" 6 "Walked" 7 "Home Visit" ///
8 "Other"
label values doc_visit_cat doc_visit_cat
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi sn1dnumsn dt1* pa1*)
keep if !missing(howgetdoc)
gen n_social_network=sn1dnumsn if sn1dnumsn>=0
label var n_social_network "Number in social network"
foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
replace dt1oftedrive=5 if dt1oftedrive<-1
replace dt1oftedrive=. if dt1oftedrive<0
levelsof dt1oftedrive, local(levels)

foreach l of local levels {
gen drive`l'=dt1oftedrive==`l'
local drive `drive' drive`l'
local lab : labe dt1oftedrive `l'
label var drive`l' "`lab'"
}
label var drive5 "Never/RF/DK"

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv4

foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
}
label var avoids "Avoids driving alone/at night/in weather"

gen miss=0
gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
gen `x'2=`x'==1 if `x'>=0
replace `x'=`x'2
drop `x'2
replace miss=1 if missing(`x')
}
replace barrier=0 if !miss & missing(barrier)
label var barrier "Any transportation disadvantage"

foreach x of varlist dt1geto* {
	replace `x'=. if dt1getoplcs7==-1 | `x'<0
	local get `get' `x'
}

local vars `drive' avoids `get' `probs' barrier
sum `vars'
local rn : word count `vars'
sum n [aw=anfinw]
local denom=r(sum)
foreach x of local vars {
	gen `x'2=`x'==1 if !missing(`x')
	replace `x'=`x'2
	drop `x'2
}

mat tab=J(`rn',4,.)
local r=1
local c=1

foreach x of local vars {
	sum `x'
	mat tab[`r',1]=r(N)
	mat tab[`r',2]=r(mean)*r(N)
	sum `x' [aw=anfin]
	mat tab[`r',3]=r(mean)*100
	mat tab[`r',4]=r(sum)/`denom'*100
	local r=`r'+1
}
mat rownames tab=`vars'

sum n
local denom=r(N)
frmttable using "`logpath'\transport_to_dr.rtf", statmat(tab) replace ///
title("Overview of transportation use") ///
note("All wave 1 SP interviews with a SR Dr's appointment included (N=`denom')") ///
ctitles("" "N nonmissing" "N yes" "% of nonmissing" "% of estimated pop") varlabels sdec(0,0,2)

gen marital_sdw=marital_sd==1 | marital_wid==1
label var marital_sdw "Separated, divorced, or widowed"
label var marital_nev "Never married"
gen marital_mp=maritalstat<=2
label var marital_mp "Married or living with partner"


foreach x in race_cat agecat income_cat education homebound_cat {
	levelsof `x', local(levels)
	foreach l of local levels {
		gen `x'`l'=`x'==`l' if !missing(`x')
		local lab: label `x' `l'
		label var `x'`l' "`lab'"
		local `xvars' `x' `x'`l'
}
}




local cvars1 age
*local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 maritalstat 
local catvars4 homebound_cat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever

local ivars1 `agevars' female `racevars' `income_catvars' `educationvars' marital_mp marital_sdw ///
marital_nev rcfres metro_ind 
local ivars2 `ivars2'
local cvars2 `cvars3'
local ivars3 `homebound_catvars' device_any 
local cvars3 n_social_network 
local ivars4 /*frailty*/ proxy has_doc_help /*elixhauser*/sr_diabetes_ever ///
sr_ami_ever sr_lung_dis_ever sr_htn_ever metro_ind ind_doc_2 ind_doc_2_surv ///
ind_hosp_2 ind_hosp_2_surv


svyset [pw=anfinw] 
local rn : word count `cvars1' `cvars2' `cvars3' `ivars1' `ivars2' `ivars3' `cvars4' `ivars4' n

local r=1
local c=1
mat tab=J(`rn'+1,18,.)
mat stars=J(`rn'+1,18,0)
forvalues d=1/9 {
	if `d'==9 {
		preserve
		replace doc_visit_cat=9
}
	forvalues i=1/4 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			if inrange(`d',2,8) {
				svy: reg `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				test
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01)
}
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if inrange(`d',2,8) {
				svy: tab `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.05)+(e(p_Pear)<.01)
}
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+2
}
restore
mat rownames tab=`cvars1' `ivars1' `cvars2' `ivars2' `cvars3' `ivars3' `cvars4' `ivars4' ///
"Estimate" N

frmttable using "`logpath'\transport_to_dr.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "Drove" "" "Got Ride" "P-value" "Van/shuttle" "P-value" ///
"Public Transit" "P-value" "Taxi" "P-value" "Walked" "P-value" "Home Visit" "P-value" ///
 "Other" "P-value" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 addtable annotate(stars) asymbol(*,**)



 
levelsof doc_visit_cat, local(levels)

local rn : word count `levels'

mat tab=J(`rn'+1,8,.)
mat stars=J(`rn'+1,8,0)
local r=1
local c=1

sum n 
local denom =r(N)
foreach l in n `levels' {
	gen dv`l'=doc_visit_cat==`l' if !missing(doc_visit_cat)
	if "`l'"!="n" {
		local lab : label doc_visit_cat `l'
		label var dv`l' "`lab'"
}
	tab dv`l'
	sum dv`l'
	mat tab[`r',`c']=r(N)*r(mean)
	sum dv`l' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local c=`c'+3
	forvalues i=0/1 {
		sum dv`l' if barrier==`i' [aw=anfin]
		mat tab[`r',`c']=r(mean)*100
		mat tab[`r',`c'+1]=r(sum)
		local c=`c'+2
}	
	svy: tab dv`l' barrier
	mat tab[`r',`c']=e(p_Pear)
	mat stars[`r',`c']=(e(p_Pear)<.05)+(e(p_Pear)<.01)
	local c=1
	local r=`r'+1
	local dv `dv' dv`l'
}

mat rownames tab=`dv'
di "`dv'"
frmttable using "transport_to_dr.rtf", statmat(tab) varlabels ///
sdec(0,2,0,2,0,2,0,2) addtable ///
title("Estimates of transportation disadvantage by type of transport to the doctor") ///
ctitles("" "" "Total" "" "No Transp Disadv" "" "With Transp Disadv" ""  \ ///
"" "N" "National Estimate %" "Est. N" "Est. %" "Est. N" "Est. %" "Est. N" "P-value")

levelsof agecat, local(levels)
foreach l of local levels {
	gen age`l'=agecat==`l'
	label var age`l' "`=`l'*5+60'-`=`l'*5+64'"
	local age `age' `age`l''
}
label var age6 "90+"
local yvars ind_hosp_2 ind_hosp_2_surv ind_doc_2 ind_doc_2_surv
local xvars `age' female black hisp other_race income_cat1 income_cat2 income_cat3 ///
education1 education2 education3 adl_impair iadl_impair /*homebound_cat1*/ metro_ind

outreg, clear

label var education1 "<High School" 
label var education2 "HS/GED"
label var education3 "Some College"
label var homebound_cat1 "Homebound"
 
foreach x in `yvars' {
	logit `x' barrier, or
	qui outreg, merge stats(e_b p) varlabels
	logit `x' barrier `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

outreg using "`logpath'\transport_to_dr.rtf", varlabels addtable replay








H="transp disadvantage=0 if drive instead of missing"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
cd "`logpath'"

use "E:\nhats\data\NHATS cleaned\op_round_1_5.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_5.dta", clear
svyset [pw=anfinwgt]
gen w2hosp=sr_hosp_ind if wave==2
by spid, sort: egen ind_hosp_2=max(w2hosp)
replace w2hosp=. if lml==1 
by spid, sort: egen ind_hosp_2_surv=max(w2hosp)
gen w2doc=reg_doc_seen==1 if wave==2
by spid: egen ind_doc_2=max(w2doc)
replace w2doc=. if lml==1
by spid: egen ind_doc_2_surv=max(w2doc)
label var ind_doc_2 "SR seen regular doc at wave 2"
label var ind_doc_2_surv "Sr seen regular doc at wave 2 (survivors only)"
label var ind_hosp_2 "SR hospitalization at wave 2"
label var ind_hosp_2_surv "SR hospitalization at wave 2 (survivors only)"
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
gen n=1

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from home or for seniors" ///
4 "Public Transit" 5 "Taxi" 6 "Walked" 7 "Home Visit" ///
8 "Other"
label values doc_visit_cat doc_visit_cat
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi sn1dnumsn dt1* pa1*)
keep if !missing(howgetdoc)
gen n_social_network=sn1dnumsn if sn1dnumsn>=0
label var n_social_network "Number in social network"
foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
replace dt1oftedrive=5 if dt1oftedrive<-1
replace dt1oftedrive=. if dt1oftedrive<0
levelsof dt1oftedrive, local(levels)

foreach l of local levels {
gen drive`l'=dt1oftedrive==`l'
local drive `drive' drive`l'
local lab : labe dt1oftedrive `l'
label var drive`l' "`lab'"
}
label var drive5 "Never/RF/DK"

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv4

foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
}
label var avoids "Avoids driving alone/at night/in weather"

gen miss=0
gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
gen `x'2=`x'==1 if `x'>=0
replace `x'=`x'2
drop `x'2
replace miss=1 if missing(`x')
}
replace barrier=0 if !miss & missing(barrier)
label var barrier "Any transportation disadvantage"
replace barrier=0 if drives==1

foreach x of varlist dt1geto* {
	replace `x'=. if dt1getoplcs7==-1 | `x'<0
	local get `get' `x'
}

local vars `drive' avoids `get' `probs' barrier
sum `vars'
local rn : word count `vars'
sum n [aw=anfinw]
local denom=r(sum)
foreach x of local vars {
	gen `x'2=`x'==1 if !missing(`x')
	replace `x'=`x'2
	drop `x'2
}

mat tab=J(`rn',4,.)
local r=1
local c=1

foreach x of local vars {
	sum `x'
	mat tab[`r',1]=r(N)
	mat tab[`r',2]=r(mean)*r(N)
	sum `x' [aw=anfin]
	mat tab[`r',3]=r(mean)*100
	mat tab[`r',4]=r(sum)/`denom'*100
	local r=`r'+1
}
mat rownames tab=`vars'

sum n
local denom=r(N)
frmttable using "`logpath'\transport_to_dr_incldrive.rtf", statmat(tab) replace ///
title("Overview of transportation use") ///
note("All wave 1 SP interviews with a SR Dr's appointment included (N=`denom')") ///
ctitles("" "N nonmissing" "N yes" "% of nonmissing" "% of estimated pop") varlabels sdec(0,0,2)

gen marital_sdw=marital_sd==1 | marital_wid==1
label var marital_sdw "Separated, divorced, or widowed"
label var marital_nev "Never married"
gen marital_mp=maritalstat<=2
label var marital_mp "Married or living with partner"


foreach x in race_cat agecat income_cat education homebound_cat {
	levelsof `x', local(levels)
	foreach l of local levels {
		gen `x'`l'=`x'==`l' if !missing(`x')
		local lab: label `x' `l'
		label var `x'`l' "`lab'"
		local `xvars' `x' `x'`l'
}
}




local cvars1 age
*local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 maritalstat 
local catvars4 homebound_cat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever

local ivars1 `agevars' female `racevars' `income_catvars' `educationvars' marital_mp marital_sdw ///
marital_nev rcfres metro_ind 
local ivars2 `ivars2'
local cvars2 `cvars3'
local ivars3 `homebound_catvars' device_any 
local cvars3 n_social_network 
local ivars4 /*frailty*/ proxy has_doc_help /*elixhauser*/sr_diabetes_ever ///
sr_ami_ever sr_lung_dis_ever sr_htn_ever metro_ind ind_doc_2 ind_doc_2_surv ///
ind_hosp_2 ind_hosp_2_surv


svyset [pw=anfinw] 
local rn : word count `cvars1' `cvars2' `cvars3' `ivars1' `ivars2' `ivars3' `cvars4' `ivars4' n

local r=1
local c=1
mat tab=J(`rn'+1,18,.)
mat stars=J(`rn'+1,18,0)
forvalues d=1/9 {
	if `d'==9 {
		preserve
		replace doc_visit_cat=9
}
	forvalues i=1/4 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			if inrange(`d',2,8) {
				svy: reg `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				test
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01)
}
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if inrange(`d',2,8) {
				svy: tab `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.05)+(e(p_Pear)<.01)
}
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+2
}
restore
mat rownames tab=`cvars1' `ivars1' `cvars2' `ivars2' `cvars3' `ivars3' `cvars4' `ivars4' ///
"Estimate" N

frmttable using "`logpath'\transport_to_dr_incldrive.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "Drove" "" "Got Ride" "P-value" "Van/shuttle" "P-value" ///
"Public Transit" "P-value" "Taxi" "P-value" "Walked" "P-value" "Home Visit" "P-value" ///
 "Other" "P-value" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 addtable annotate(stars) asymbol(*,**)



 
levelsof doc_visit_cat, local(levels)

local rn : word count `levels'

mat tab=J(`rn'+1,8,.)
mat stars=J(`rn'+1,8,0)
local r=1
local c=1

sum n 
local denom =r(N)
foreach l in n `levels' {
	gen dv`l'=doc_visit_cat==`l' if !missing(doc_visit_cat)
	if "`l'"!="n" {
		local lab : label doc_visit_cat `l'
		label var dv`l' "`lab'"
}
	tab dv`l'
	sum dv`l'
	mat tab[`r',`c']=r(N)*r(mean)
	sum dv`l' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local c=`c'+3
	forvalues i=0/1 {
		sum dv`l' if barrier==`i' [aw=anfin]
		mat tab[`r',`c']=r(mean)*100
		mat tab[`r',`c'+1]=r(sum)
		local c=`c'+2
}	
	svy: tab dv`l' barrier
	mat tab[`r',`c']=e(p_Pear)
	mat stars[`r',`c']=(e(p_Pear)<.05)+(e(p_Pear)<.01)
	local c=1
	local r=`r'+1
	local dv `dv' dv`l'
}

mat rownames tab=`dv'
di "`dv'"
frmttable using "transport_to_dr_incldrive.rtf", statmat(tab) varlabels ///
sdec(0,2,0,2,0,2,0,2) addtable ///
title("Estimates of transportation disadvantage by type of transport to the doctor") ///
ctitles("" "" "Total" "" "No Transp Disadv" "" "With Transp Disadv" ""  \ ///
"" "N" "National Estimate %" "Est. N" "Est. %" "Est. N" "Est. %" "Est. N" "P-value")

levelsof agecat, local(levels)
foreach l of local levels {
	gen age`l'=agecat==`l'
	label var age`l' "`=`l'*5+60'-`=`l'*5+64'"
	local age `age' `age`l''
}
label var age6 "90+"
local yvars ind_hosp_2 ind_hosp_2_surv ind_doc_2 ind_doc_2_surv
local xvars `age' female black hisp other_race income_cat1 income_cat2 income_cat3 ///
education1 education2 education3 adl_impair iadl_impair /*homebound_cat1*/ metro_ind

outreg, clear

label var education1 "<High School" 
label var education2 "HS/GED"
label var education3 "Some College"
label var homebound_cat1 "Homebound"
 
foreach x in `yvars' {
	logit `x' barrier, or
	qui outreg, merge stats(e_b p) varlabels
	logit `x' barrier `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

outreg using "`logpath'\transport_to_dr_incldrive.rtf", varlabels addtable replay








H="Omari"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
cd "`logpath'"

use "E:\nhats\data\NHATS cleaned\op_round_1_5.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_5.dta", clear
svyset [pw=anfinwgt]
gen w2hosp=sr_hosp_ind if wave==2
by spid, sort: egen ind_hosp_2=max(w2hosp)
replace w2hosp=. if lml==1 
by spid, sort: egen ind_hosp_2_surv=max(w2hosp)
gen w2doc=reg_doc_seen==1 if wave==2
by spid: egen ind_doc_2=max(w2doc)
replace w2doc=. if lml==1
by spid: egen ind_doc_2_surv=max(w2doc)
label var ind_doc_2 "SR seen regular doc at wave 2"
label var ind_doc_2_surv "Sr seen regular doc at wave 2 (survivors only)"
label var ind_hosp_2 "SR hospitalization at wave 2"
label var ind_hosp_2_surv "SR hospitalization at wave 2 (survivors only)"
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
gen n=1

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from home or for seniors" ///
4 "Public Transit" 5 "Taxi" 6 "Walked" 7 "Home Visit" ///
8 "Other"
label values doc_visit_cat doc_visit_cat
drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi sn1dnumsn dt1* pa1*)
keep if !missing(howgetdoc)
gen n_social_network=sn1dnumsn if sn1dnumsn>=0
label var n_social_network "Number in social network"
foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
replace dt1oftedrive=5 if dt1oftedrive<-1
replace dt1oftedrive=. if dt1oftedrive<0
levelsof dt1oftedrive, local(levels)

foreach l of local levels {
gen drive`l'=dt1oftedrive==`l'
local drive `drive' drive`l'
local lab : labe dt1oftedrive `l'
label var drive`l' "`lab'"
}
label var drive5 "Never/RF/DK"

gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv4

foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
}
label var avoids "Avoids driving alone/at night/in weather"

gen miss=0
gen barrier=0 if dt1oftedrive<0 | dt1oftedrive==5
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
gen `x'2=`x'==1 if `x'>=0
replace `x'=`x'2
drop `x'2
replace miss=1 if missing(`x')
}
replace barrier=0 if !miss & missing(barrier)
label var barrier "Any transportation disadvantage"
replace barrier=0 if drives==1

foreach x of varlist dt1geto* {
	replace `x'=. if dt1getoplcs7==-1 | `x'<0
	local get `get' `x'
}

local vars `drive' avoids `get' `probs' barrier
sum `vars'
local rn : word count `vars'
sum n [aw=anfinw]
local denom=r(sum)
foreach x of local vars {
	gen `x'2=`x'==1 if !missing(`x')
	replace `x'=`x'2
	drop `x'2
}

mat tab=J(`rn',4,.)
local r=1
local c=1

foreach x of local vars {
	sum `x'
	mat tab[`r',1]=r(N)
	mat tab[`r',2]=r(mean)*r(N)
	sum `x' [aw=anfin]
	mat tab[`r',3]=r(mean)*100
	mat tab[`r',4]=r(sum)/`denom'*100
	local r=`r'+1
}
mat rownames tab=`vars'

sum n
local denom=r(N)

frmttable using "`logpath'\transport_to_dr_incldrive_omari.rtf", statmat(tab) replace ///
title("Overview of transportation use") ///
note("All wave 1 SP interviews with a SR Dr's appointment included (N=`denom')") ///
ctitles("" "N nonmissing" "N yes" "% of nonmissing" "% of estimated pop") varlabels sdec(0,0,2)

gen marital_sdw=marital_sd==1 | marital_wid==1
label var marital_sdw "Separated, divorced, or widowed"
label var marital_nev "Never married"
gen marital_mp=maritalstat<=2
label var marital_mp "Married or living with partner"


/*
foreach x in race_cat agecat income_cat education homebound_cat {
	levelsof `x', local(levels)
	foreach l of local levels {
		gen `x'`l'=`x'==`l' if !missing(`x')
		local lab: label `x' `l'
		label var `x'`l' "`lab'"
local `x'vars `x' `x'`l'		
}
}
*/
tab agecat, gen(age1)
tab race_cat, gen(racial)
tab income_cat, gen(incgroup)
tab education, gen(educ)
tab homebound_cat, gen(homebound)


local agevars age11 age12 age13 age14 age15 age16
local race_catvars racial1 racial2 racial3 racial4
local income_catvars incgroup1 incgroup2 incgroup3 incgroup4
local educationvars educ1 educ2 educ3 educ4
local homebound_catvars homebound1 homebound2 homebound3 homebound4



local cvars1 age
*local cvars2 aveincome
local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 maritalstat 
local catvars4 homebound_cat
local ivars2 adl_independent iadl_independent
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever

local ivars1 `agevars' female `race_catvars' `income_catvars' `educationvars' marital_mp marital_sdw ///
marital_nev rcfres metro_ind 
local ivars2 `ivars2'
local cvars2 `cvars3'
local ivars3 `homebound_catvars' device_any 
local cvars3 n_social_network 
local ivars4 /*frailty*/ proxy has_doc_help /*elixhauser*/sr_diabetes_ever ///
sr_ami_ever sr_lung_dis_ever sr_htn_ever metro_ind ind_doc_2 ind_doc_2_surv ///
ind_hosp_2 ind_hosp_2_surv


svyset [pw=anfinw] 
local rn : word count `cvars1' `cvars2' `cvars3' `ivars1' `ivars2' `ivars3' `cvars4' `ivars4' n

local r=1
local c=1
mat tab=J(`rn'+1,18,.)
mat stars=J(`rn'+1,18,0)
forvalues d=1/9 {
	if `d'==9 {
		preserve
		replace doc_visit_cat=9
}
	forvalues i=1/4 {
		foreach x in `cvars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)
			if inrange(`d',2,8) {
				svy: reg `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				test
				mat tab[`r',`c'+1]=r(p)
				mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01)
}
			local r=`r'+1
}
		/*foreach x in `catvars`i'' {
			levelsof `x', local(levels)
			local rows : word count `levels'
			tab `x' if doc_visit_cat==`d',matcell(x)
			forvalues j=1/`rows' {
				mat tab[`r',`c']=(`=x[`j',1]'/r(N))*100
				local r=`r'+1
}
}*/
		foreach x in `ivars`i'' {
			sum `x' if doc_visit_cat==`d' [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if inrange(`d',2,8) {
				svy: tab `x' doc_visit_cat if doc_visit_cat==`d' | doc_visit_cat==1
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.05)+(e(p_Pear)<.01)
}
			local r=`r'+1
}
}
	sum n if doc_visit_cat==`d' [aw=anfinw]
	mat tab[`r',`c']=r(sum)
	mat tab[`r'+1,`c']=r(N)
	local r=1
	local c=`c'+2
}
restore
mat rownames tab=`cvars1' `ivars1' `cvars2' `ivars2' `cvars3' `ivars3' `cvars4' `ivars4' ///
"Estimate" N

frmttable using "`logpath'\transport_to_dr_incldrive_omari.rtf", statmat(tab) sdec(2) varlabels ///
ctitles("" "Drove" "" "Got Ride" "P-value" "Van/shuttle" "P-value" ///
"Public Transit" "P-value" "Taxi" "P-value" "Walked" "P-value" "Home Visit" "P-value" ///
 "Other" "P-value" "Full Sample") title("Sample Characteristics by Mode of Transport to Dr.") ///
 addtable annotate(stars) asymbol(*,**)



 
levelsof doc_visit_cat, local(levels)

local rn : word count `levels'

mat tab=J(`rn'+1,8,.)
mat stars=J(`rn'+1,8,0)
local r=1
local c=1

sum n 
local denom =r(N)
foreach l in n `levels' {
	gen dv`l'=doc_visit_cat==`l' if !missing(doc_visit_cat)
	if "`l'"!="n" {
		local lab : label doc_visit_cat `l'
		label var dv`l' "`lab'"
}
	tab dv`l'
	sum dv`l'
	mat tab[`r',`c']=r(N)*r(mean)
	sum dv`l' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local c=`c'+3
	forvalues i=0/1 {
		sum dv`l' if barrier==`i' [aw=anfin]
		mat tab[`r',`c']=r(mean)*100
		mat tab[`r',`c'+1]=r(sum)
		local c=`c'+2
}	
	svy: tab dv`l' barrier
	mat tab[`r',`c']=e(p_Pear)
	mat stars[`r',`c']=(e(p_Pear)<.05)+(e(p_Pear)<.01)
	local c=1
	local r=`r'+1
	local dv `dv' dv`l'
}

mat rownames tab=`dv'
di "`dv'"
frmttable using "transport_to_dr_incldrive_omari.rtf", statmat(tab) varlabels ///
sdec(0,2,0,2,0,2,0,2) addtable ///
title("Estimates of transportation disadvantage by type of transport to the doctor") ///
ctitles("" "" "Total" "" "No Transp Disadv" "" "With Transp Disadv" ""  \ ///
"" "N" "National Estimate %" "Est. N" "Est. %" "Est. N" "Est. %" "Est. N" "P-value")

levelsof agecat, local(levels)
foreach l of local levels {
	gen age`l'=agecat==`l'
	label var age`l' "`=`l'*5+60'-`=`l'*5+64'"
	local age `age' `age`l''
}
label var age6 "90+"
local yvars ind_hosp_2 ind_hosp_2_surv ind_doc_2 ind_doc_2_surv
local xvars `age' female black hisp other_race income_cat1 income_cat2 income_cat3 ///
education1 education2 education3 adl_impair iadl_impair /*homebound_cat1*/ metro_ind

outreg, clear

label var education1 "<High School" 
label var education2 "HS/GED"
label var education3 "Some College"
label var homebound_cat1 "Homebound"
 
foreach x in `yvars' {
	logit `x' barrier, or
	qui outreg, merge stats(e_b p) varlabels
	logit `x' barrier `xvars', or
	qui outreg, merge stats(e_b p) varlabels
	estat ic
	linktest
	*predict p`x'
}

outreg using "`logpath'\transport_to_dr_incldrive_omari.rtf", varlabels addtable replay








H="tables 10/31/17"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
cd "`logpath'"

use "E:\nhats\data\NHATS cleaned\op_round_1_5.dta", clear
keep if wave==1
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_5.dta" if !proxy, clear
gen w2hosp=sr_hosp_ind if wave==2
by spid, sort: egen ind_hosp_2=max(w2hosp)
replace w2hosp=. if lml==1 
by spid, sort: egen ind_hosp_2_surv=max(w2hosp)
gen w2doc=reg_doc_seen==1 if wave==2
by spid: egen ind_doc_2=max(w2doc)
replace w2doc=. if lml==1
by spid: egen ind_doc_2_surv=max(w2doc)
label var ind_doc_2 "SR seen regular doc at wave 2"
label var ind_doc_2_surv "Sr seen regular doc at wave 2 (survivors only)"
label var ind_hosp_2 "SR hospitalization at wave 2"
label var ind_hosp_2_surv "SR hospitalization at wave 2 (survivors only)"
keep if wave==1 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
gen n=1

label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from home or for seniors" ///
4 "Public Transit" 5 "Taxi" 6 "Walked" 7 "Home Visit" ///
8 "Other" 9 "Missing"
label values doc_visit_cat doc_visit_cat
replace doc_visit_cat=doc_visit_cat-1 if doc_visit_cat>3
replace doc_visit_cat=9  if missing(doc_visit_cat) & reg_doc_seen==1
*drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_1\NHATS_Round_1_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi sn1dnumsn dt1* pa1*)
*keep if !missing(howgetdoc)


//note 11/14/17--add importance of activities
gen ind_imp_visit=inlist(pa1impvstfam,1) if inrange(pa1impvstfam,-1,5)
gen ind_imp_relig=inlist(pa1imprelser,1) if inrange(pa1imprels,-1,5)
gen ind_imp_club=inlist(pa1imparclub,1) if inrange(pa1imparclub,-1,5)
gen ind_imp_goout=inlist(pa1impouteny,1) if inrange(pa1impouteny,-1,5)

label var ind_imp_visit "Very important to visit in person with friends/family"
label var ind_imp_relig "Very important to attend religious services"
label var ind_imp_club "Very important to participate in clubs, classes, etc."
label var ind_imp_goout "Very important to go out for enjoyment"


egen imp_index=rowtotal(ind_imp*)
gen ind_imp_any=imp_index>=1 if !missing(imp_index)
label var imp_index "Count of important activities"
label var ind_imp_any "Indicator any activity very important"

local imp
foreach x of varlist ind_imp* {
	local imp `imp' `x'
}

foreach x in out insd bed {
	gen device_`x'=mo1d`x'devi==2 if inlist(mo1d`x'devi,1,2)
}

foreach x in eat bath toil dres {
	gen device_`x'=sc1d`x'devi==2 if inlist(sc1d`x'devi,1,2)
}
replace device_bath=0 if sc1dbathdevi==9
gen device_any=0
foreach x in out ins bed eat bath toil dres {
	replace device_any=1 if device_`x'==1
}
label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/
gen drives=dt1oftedrive>0 & dt1oftedrive<5
label var drives "Drives"
replace dt1oftedrive=6 if dt1oftedrive<-1
replace dt1oftedrive=5 if dt1oftedrive<0
levelsof dt1oftedrive, local(levels)

local lab1  Every day (7 days a week)
local lab2 Most days (5-6 days a week)
local lab3 Some days (2-4 days a week)
local lab4 Rarely (<1 day a week)
local lab5 Never
local lab6 Refused/don't know

foreach l of local levels {
gen drive`l'=dt1oftedrive==`l'
local drive `drive' drive`l'

label var drive`l' "`lab`l''"
}


gen avoids=0 if dt1oftedrive>0 & dt1oftedrive!=5
local avoids dt1avoidriv1 dt1avoidriv2 dt1avoidriv4

foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
}
label var avoids "Avoids driving alone/at night/in weather*"

gen miss=0
gen barrier=0 if dt1oftedrive<0 | inlist(dt1oftedrive,5,6)
local probs pa1trkpfrvis pa1trprrelsr pa1trprkpfgr pa1trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
gen `x'2=`x'==1 if `x'>=0
replace `x'=`x'2
drop `x'2
replace miss=miss+1 if missing(`x') 
}
replace barrier=0 if !miss & missing(barrier)
replace barrier=. if miss==4
label var barrier "Any transportation disadvantage"

local lab1 Walked
local lab2 Got ride
local lab3 Van or shuttle provided by place of residence
local lab4 Van or shuttle for seniors
local lab5 Public transportation
local lab6 Taxi
local lab7 Other
local l=1

foreach x of varlist dt1geto* {
	replace `x'=. if dt1getoplcs7==-1 | `x'<0
	label var `x' "`lab`l''"
	local get `get' `x'
	local l=`l'+1
}
replace dt1getoplcs3=0 if !missing(dt1getoplcs7) & missing(dt1getoplcs3)
local vars `drive' avoids `get' `probs' barrier
sum `vars'
local rn : word count `vars'
sum n [aw=anfinw]
local denom=r(sum)
foreach x of local vars {
	gen `x'2=`x'==1 if !missing(`x')
	replace `x'=`x'2
	drop `x'2
}

local vars `drive' avoids `get'

local rn : word count `vars' 1 1
mat tab=J(`rn',3,.)

local r=2
local c=1
foreach y in "0,1" {
preserve
keep if inlist(drives,`y')
foreach x of local vars {
	sum `x' if `x'==1
	mat tab[`r',`c']=r(N)
	sum `x' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local r=`r'+1
	if "`x'"=="avoids" local r=`r'+1
}
local r=2
local c=`c'+3
restore
}
mat rownames tab="Frequency" `drive' avoids "Other_transport" `get'

frmttable using transport_tables.rtf, replace statmat(tab) sdec(0,2,0) varlabels ///
title("Table 1. Modes of transportation among older community-dwelling Medicare beneficiaries, 2011") ///
ctitles("" "N" "Weighted Percent" "National estimate") ///
note("* among those who drive")


local rn : word count `vars' 1 1
mat tab=J(`rn',6,.)

local r=2
local c=1
foreach y in 1 0 {
preserve
keep if inlist(drives,`y')
foreach x of local vars {
	sum `x' if `x'==1
	mat tab[`r',`c']=r(N)
	sum `x' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local r=`r'+1
	if "`x'"=="avoids" local r=`r'+1
}
local r=2
local c=`c'+3
restore
}
mat rownames tab="Frequency" `drive' avoids "Other_transport" `get'

frmttable using transport_tables.rtf, addtable statmat(tab) sdec(0,2,0,0,2,0) varlabels ///
title("Table 1a. Modes of transportation among older community-dwelling Medicare beneficiaries by driver status") ///
ctitles("" "Drivers" "" "" "Non-drivers"\ ///
"N" "Weighted Percent" "National estimate" "N" "Weighted Percent" "National estimate") ///
note("* among those who drive")

gen marital_sdw=marital_sd==1 | marital_wid==1
label var marital_sdw "Separated, divorced, or widowed"
label var marital_nev "Never married"
gen marital_mp=maritalstat<=2
label var marital_mp "Married or living with partner"
gen sr_cond_cat=1 if sr_numcond<2
replace sr_cond_cat=2 if inrange(sr_numcond,2,4)
replace sr_cond_cat=3 if inrange(sr_numcond,5,15)
label define sr_cond_cat 1 "0-1 SR condition" 2 "2-4 SR conditions" 3 "5+ SR conditions"
label values sr_cond_cat sr_cond_cat 
label copy race race_cat

//note,11/14/17--changing to 3-category age
replace agecat=1 if age<=74
replace agecat=2 if inrange(age,75,84)
replace agecat=3 if age>=85 | agecat>=5
label define agecat 1 "Age <75" 2 "Age 75-84" 3 "Age 85+"
label values agecat agecat

foreach x in race_cat agecat income_cat education homebound_cat region doc_visit_cat sr_cond_cat {
	levelsof `x', local(levels)
	foreach l of local levels {
		gen `x'`l'=`x'==`l' if !missing(`x')
		local lab: label `x' `l'
		label var `x'`l' "`lab'"
		local `x'vars ``x'vars' `x'`l'
}
}

levelsof education, local(levels)
foreach l of local levels {
	local lab : label edulbl `l'
	label var education`l' "`lab'"
}
/*local lab1 65-69
local lab2 70-74
local lab3 75-79
local lab4 80-84
local lab5 85-89
local lab6 90+

forvalues i=1/6 {
label var agecat`i' "`lab`i''"
}
*/



local cvars1 age
*local cvars2 aveincome
*local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 maritalstat 
local catvars4 homebound_cat
local ivars2 adl_impair iadl_impair
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever

local ivars1 `agecatvars' female `race_catvars' `income_catvars' medicaid `educationvars' marital_mp marital_sdw ///
marital_nev rcfres metro_ind `regionvars'
local ivars2 `ivars2'
local cvars2 
local ivars3 /*`homebound_catvars'*/ `imp' device_any 
local cvars3 n_social_network imp_index
local cvars4 sr_numconditions1
local ivars4 /*frailty*/ `sr_cond_catvars' prob_dem proxy has_doc_help /*elixhauser*/sr_diabetes_ever ///
sr_ami_ever sr_lung_dis_ever sr_htn_ever /*metro_ind ind_doc_2 ind_doc_2_surv ///
ind_hosp_2 ind_hosp_2_surv*/


svyset varunit [pw=anfinw], strat(varstrat) 
local rn : word count `cvars1' `cvars2' `cvars3' `ivars1' `ivars2' `ivars3' `cvars4' `ivars4' n 

preserve
keep if !drives

mat tab=J(`rn'+1,4,.)
mat stars=J(`rn'+1,4,0)
local r=3
local c=1


foreach g in "0,1" 1 0 {
	sum n if inlist(barrier,`g') [aw=anfinw]
	mat tab[1,`c']=r(N)
	mat tab[2,`c']=r(sum)
	forvalues i=1/4 {
		foreach x in `cvars`i'' {
		sum `x' if inlist(barrier,`g') [aw=anfinw]
		mat tab[`r',`c']=r(mean)
		if "`g'"=="0" {
			svy: reg `x' barrier
			test 
			mat tab[`r',`c'+1]=r(p)
			mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01)
}
		local r=`r'+1
}
		foreach x in `ivars`i'' {
			sum `x' if inlist(barrier,`g') [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if "`g'"=="0" {
				svy: tab `x' barrier
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.05)+(e(p_Pear)<.01)
}
			local r=`r'+1
}
}
	local r=3
	local c=`c'+1
}

mat rownames tab=n "Estimate" `cvars1' `ivars1' `cvars2' `ivars2' `cvars3' `ivars3' `cvars4' `ivars4'

frmttable using transport_tables.rtf, addtable statmat(tab) sdec(0\0\2) ctitles("" "All" "Disadvantaged" "No disadvantage" "P-value") ///
title("Table 2. Characteristics of sample of community dwelling non-drivers by transportation disadvantage") ///
varlabels annotate(stars) asymbol(*,**) note(* P<.05; ** P<.01)

local rn : word count `doc_visit_catvars'
mat tab=J(`rn',4,.)
local c=1
local r=1

foreach x of local doc_visit_catvars {
	foreach y in 0 1 {
		sum `x' if barrier==`y' [aw=anfinw]
		mat tab[`r',`c']=r(mean)*100
		mat tab[`r',`c'+1]=r(sum)
		local c=`c'+2
}
	local c=1
	local r=`r'+1
}

mat rownames tab=`doc_visit_catvars'

frmttable using transport_tables.rtf, addtable statmat(tab) sdec(2,0,2,0) ///
ctitles("" "No transportation disadvantage" "" "Transportation Disadvantage" \ "" ///
"Percent" "Population estimate" "Percent" "Population estimate")  varlabels ///
title("Table 3. Mode of transport to the doctor by tranpsortation disadvantage among non-drivers")
	
//logit model based on significant factors in table 2
//age race (hispanic) marital status proxy assistive device income
svy: logit barrier agecat2 agecat3  female black hisp educ_hs_ind income_cat0 ///
marital_mp prob_dem adl_impair iadl_impair sr_numconditions1 ///
 device_any

 
outreg, ctitles("" "Odds Ratios") addtable varlabels stats(e_b e_ci p) ///
title("Table 4. Logistic model of predictors of transportation disadvantage") 

svy: logit barrier i.(agecat2 agecat3 female black hisp educ_hs_ind income_cat0 ///
 marital_mp prob_dem adl_impair iadl_impair c.sr_numconditions1 ///
 device_any)
 
margins, dydx(*) post
 
outreg using transport_tables.rtf, merge addtable varlabels stats(b ci p) ///
title("Table 4. Logistic model of predictors of transportation disadvantage") ///
ctitles("" "AMEs")



H="run for wave 5"
/*per Katherine's ask, 
-limit sample drop dr not seen home visit and other from analyses and rerun

-drop everything besides drive and got ride and rerun

-add walk and public transit/taxi and !homebound to drive for "self-reliant"
-"reliant on others"--van, got ride, homebound & public transport/taxi
*/
local logpath "E:\nhats\data\Projects\Transport to Dr\logs"
cd "`logpath'"

use "E:\nhats\data\NHATS cleaned\op_round_1_5.dta", clear
keep if wave==5
replace op_doc_help=0 if op_doc_help==-1
by spid, sort: egen has_doc_help=max(op_doc_help)
label var has_doc_help "SP had someone sit in on dr. mtgs"
keep spid has_doc_help
duplicates drop
tempfile op
save `op'

use "E:\nhats\data\nhats Cleaned\sp_round_1_6.dta" if !nhres, clear
gen w2hosp=sr_hosp_ind if wave==6
by spid, sort: egen ind_hosp_2=max(w2hosp)
replace w2hosp=. if lml==1 
by spid, sort: egen ind_hosp_2_surv=max(w2hosp)
gen w2doc=reg_doc_seen==1 if wave==6
by spid: egen ind_doc_2=max(w2doc)
replace w2doc=. if lml==1
by spid: egen ind_doc_2_surv=max(w2doc)
label var ind_doc_2 "SR seen regular doc at wave 6"
label var ind_doc_2_surv "Sr seen regular doc at wave 6 (survivors only)"
label var ind_hosp_2 "SR hospitalization at wave 6"
label var ind_hosp_2_surv "SR hospitalization at wave 6 (survivors only)"
keep if wave==5 & sp_ivw_yes==1
merge m:1 spid using `op', keep(match master)
replace has_doc_help=0 if missing(has_doc_help)
gen doc_visit_cat=howgetdoc
replace doc_visit_cat=0 if reg_doc_seen==0
gen n=1
drop if lml
label define doc_visit_cat 0 "Not seen" 1 "Drove" 2 "Got Ride" 3 "Van/Shuttle from home or for seniors" ///
4 "Public Transit" 5 "Taxi" 6 "Walked" 7 "Home Visit" ///
8 "Other" 9 "Missing"
label values doc_visit_cat doc_visit_cat
replace doc_visit_cat=doc_visit_cat-1 if doc_visit_cat>3
replace doc_visit_cat=9  if missing(doc_visit_cat) & reg_doc_seen==1
*drop if missing(doc_visit_cat)
merge 1:1 spid using "E:\nhats\data\NHATS public\Round_5\NHATS_Round_5_SP_File_old.dta", keep(match master) ///
nogen keepusing (*devi sn5dnumsn dt5* pa5*)
*keep if !missing(howgetdoc)


//note 11/14/17--add importance of activities
replace ind_imp_visit=. if !inrange(pa5impvstfam,-1,5)
replace ind_imp_relig=. if !inrange(pa5imprels,-1,5)
replace ind_imp_club=. if !inrange(pa5imparclub,-1,5)
replace ind_imp_goout=. if !inrange(pa5impouteny,-1,5)

label var ind_imp_visit "Very important to visit in person with friends/family"
label var ind_imp_relig "Very important to attend religious services"
label var ind_imp_club "Very important to participate in clubs, classes, etc."
label var ind_imp_goout "Very important to go out for enjoyment"


egen imp_index=rowtotal(ind_imp*)
gen ind_imp_any=imp_index>=1 if !missing(imp_index)
label var imp_index "Count of important activities"
label var ind_imp_any "Indicator any activity very important"

local imp
foreach x of varlist ind_imp* {
	local imp `imp' `x'
}

replace anfinw=anfinw*6855860/5671878 if !female & age<70
replace anfinw=anfinw*4941100/5071147 if !female & inrange(age,70,74)
replace anfinw=anfinw*3367300/3524465 if !female & inrange(age,75,79)
replace anfinw=anfinw*2257880/2208455 if !female & inrange(age,80,84)
replace anfinw=anfinw*1307620/1358952 if !female & inrange(age,85,89)
replace anfinw=anfinw*648680/624319   if !female & inrange(age,90,300)

replace anfinw=anfinw*7601440/6226214 if female & age<70
replace anfinw=anfinw*5695060/6077509 if female & inrange(age,70,74)
replace anfinw=anfinw*4182460/4196832 if female & inrange(age,75,79)
replace anfinw=anfinw*3165560/3137807 if female & inrange(age,80,84)
replace anfinw=anfinw*2253980/2157300 if female & inrange(age,85,89)
replace anfinw=anfinw*1577880/1534438 if female & inrange(age,90,300)

label var device_any "Uses any assistive device for ADLs"
/*
age (cat)
sex
race
-white,black,hisp,oth
income(cat)
<15,15-29999,30-59999,60+
Ed level 
-Lt hs,hs, somecol, BA+
sum of adl needs
sum of iadl needs
homebound stat
hb,never by self, w/ diff, indep
marital status
living in assisted living
uses assistive devices
social network size
frailty
proxy status
did someone sit w/ you at dr visit
sum of comorbs
ambulatory car-sens chronic conditions
-diab,chf,asthma,copd,hypertension
*/

replace dt5oftedrive=6 if dt5oftedrive<-1
replace dt5oftedrive=5 if dt5oftedrive<0
levelsof dt5oftedrive, local(levels)

local lab1  Every day (7 days a week)
local lab2 Most days (5-6 days a week)
local lab3 Some days (2-4 days a week)
local lab4 Rarely (<1 day a week)
local lab5 Never
local lab6 Refused/don't know

foreach l of local levels {
gen drive`l'=dt5oftedrive==`l'
local drive `drive' drive`l'

label var drive`l' "`lab`l''"
}

drop avoids
gen avoids=0 if dt5oftedrive>0 & dt5oftedrive!=5
local avoids dt5avoidriv1 dt5avoidriv2 dt5avoidriv4

foreach x of varlist `avoids' {
	replace avoids=1 if `x'==1
	replace `x'=. if `x'<0
}
label var avoids "Avoids driving alone/at night/in weather*"

gen miss=0
gen barrier=0 if dt5oftedrive<0 | inlist(dt5oftedrive,5,6)
local probs pa5trkpfrvis pa5trprrelsr pa5trprkpfgr pa5trprgoout
foreach x in `probs' {
replace barrier=1 if `x'==1
gen `x'2=`x'==1 if `x'>=0
replace `x'=`x'2
drop `x'2
replace miss=miss+1 if missing(`x') 
}
replace barrier=0 if !miss & missing(barrier)
replace barrier=. if miss==4
label var barrier "Any transportation disadvantage"

local lab1 Walked
local lab2 Got ride
local lab3 Van or shuttle provided by place of residence
local lab4 Van or shuttle for seniors
local lab5 Public transportation
local lab6 Taxi
local lab7 Other
local l=1

foreach x of varlist dt5geto* {
	replace `x'=. if dt5getoplcs7==-1 | `x'<0
	label var `x' "`lab`l''"
	local get `get' `x'
	local l=`l'+1
}
replace dt5getoplcs3=0 if !missing(dt5getoplcs7) & missing(dt5getoplcs3)
local vars `drive' avoids `get' `probs' barrier
sum `vars'
local rn : word count `vars'
sum n [aw=anfinw]
local denom=r(sum)
foreach x of local vars {
	gen `x'2=`x'==1 if !missing(`x')
	replace `x'=`x'2
	drop `x'2
}

local vars `drive' avoids `get'

local rn : word count `vars' 1 1
mat tab=J(`rn',3,.)

local r=2
local c=1
foreach y in "0,1" {
preserve
keep if inlist(drives,`y')
foreach x of local vars {
	sum `x' if `x'==1
	mat tab[`r',`c']=r(N)
	sum `x' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local r=`r'+1
	if "`x'"=="avoids" local r=`r'+1
}
local r=2
local c=`c'+3
restore
}
mat rownames tab="Frequency" `drive' avoids "Other_transport" `get'

frmttable using transport_tables_wave5.rtf, replace statmat(tab) sdec(0,2,0) varlabels ///
title("Table 1. Modes of transportation among older community-dwelling Medicare beneficiaries, 2015") ///
ctitles("" "N" "Weighted Percent" "National estimate") ///
note("* among those who drive")


local rn : word count `vars' 1 1
mat tab=J(`rn',6,.)

local r=2
local c=1
foreach y in 1 0 {
preserve
keep if inlist(drives,`y')
foreach x of local vars {
	sum `x' if `x'==1
	mat tab[`r',`c']=r(N)
	sum `x' [aw=anfinw]
	mat tab[`r',`c'+1]=r(mean)*100
	mat tab[`r',`c'+2]=r(sum)
	local r=`r'+1
	if "`x'"=="avoids" local r=`r'+1
}
local r=2
local c=`c'+3
restore
}
mat rownames tab="Frequency" `drive' avoids "Other_transport" `get'

frmttable using transport_tables_wave5.rtf, addtable statmat(tab) sdec(0,2,0,0,2,0) varlabels ///
title("Table 1a. Modes of transportation among older community-dwelling Medicare beneficiaries by driver status") ///
ctitles("" "Drivers" "" "" "Non-drivers"\ "" ///
"N" "Weighted Percent" "National estimate" "N" "Weighted Percent" "National estimate") ///
note("* among those who drive")

gen marital_sdw=marital_sd==1 | marital_wid==1
label var marital_sdw "Separated, divorced, or widowed"
label var marital_nev "Never married"
gen marital_mp=maritalstat<=2
label var marital_mp "Married or living with partner"
gen sr_cond_cat=1 if sr_numcond<2
replace sr_cond_cat=2 if inrange(sr_numcond,2,4)
replace sr_cond_cat=3 if inrange(sr_numcond,5,15)
label define sr_cond_cat 1 "0-1 SR condition" 2 "2-4 SR conditions" 3 "5+ SR conditions"
label values sr_cond_cat sr_cond_cat 
label copy race race_cat

//note,11/14/17--changing to 3-category age
replace agecat=1 if age<=74
replace agecat=2 if inrange(age,75,84)
replace agecat=3 if age>=85 | agecat>=5
label define agecat 1 "Age <75" 2 "Age 75-84" 3 "Age 85+"
label values agecat agecat

foreach x in race_cat agecat income_cat education homebound_cat region doc_visit_cat sr_cond_cat {
	levelsof `x', local(levels)
	foreach l of local levels {
		gen `x'`l'=`x'==`l' if !missing(`x')
		local lab: label `x' `l'
		label var `x'`l' "`lab'"
		local `x'vars ``x'vars' `x'`l'
}
}

levelsof education, local(levels)
foreach l of local levels {
	local lab : label edulbl `l'
	label var education`l' "`lab'"
}
/*local lab1 65-69
local lab2 70-74
local lab3 75-79
local lab4 80-84
local lab5 85-89
local lab6 90+

forvalues i=1/6 {
label var agecat`i' "`lab`i''"
}
*/



local cvars1 age
*local cvars2 aveincome
*local cvars3 adl_index iadl_index
local catvars1 agecat race_cat 
local catvars2 income_cat education 
local catvars3 maritalstat 
local catvars4 homebound_cat
local ivars2 adl_impair iadl_impair
local ivars3 rcfres device_out device_insd device_bed device_eat device_bath ///
device_toil device_dres device_any has_doc_help sr_diabetes_ever sr_ami_ever sr_lung_dis_ever ///
sr_htn_ever

local ivars1 `agecatvars' female `race_catvars' `income_catvars' medicaid `educationvars' marital_mp marital_sdw ///
marital_nev rcfres metro_ind `regionvars'
local ivars2 `ivars2'
local cvars2 
local ivars3 /*`homebound_catvars'*/ `imp' device_any 
local cvars3 n_social_network imp_index
local cvars4 sr_numconditions1
local ivars4 /*frailty*/ `sr_cond_catvars' prob_dem proxy has_doc_help /*elixhauser*/sr_diabetes_ever ///
sr_ami_ever sr_lung_dis_ever sr_htn_ever /*metro_ind ind_doc_2 ind_doc_2_surv ///
ind_hosp_2 ind_hosp_2_surv*/


svyset varunit [pw=anfinw], strat(varstrat) 
local rn : word count `cvars1' `cvars2' `cvars3' `ivars1' `ivars2' `ivars3' `cvars4' `ivars4' n 

preserve
keep if !drives

mat tab=J(`rn'+1,4,.)
mat stars=J(`rn'+1,4,0)
local r=3
local c=1


foreach g in "0,1" 1 0 {
	sum n if inlist(barrier,`g') [aw=anfinw]
	mat tab[1,`c']=r(N)
	mat tab[2,`c']=r(sum)
	forvalues i=1/4 {
		foreach x in `cvars`i'' {
		sum `x' if inlist(barrier,`g') [aw=anfinw]
		mat tab[`r',`c']=r(mean)
		if "`g'"=="0" {
			svy: reg `x' barrier
			test 
			mat tab[`r',`c'+1]=r(p)
			mat stars[`r',`c'+1]=(r(p)<.05)+(r(p)<.01)
}
		local r=`r'+1
}
		foreach x in `ivars`i'' {
			sum `x' if inlist(barrier,`g') [aw=anfinw]
			mat tab[`r',`c']=r(mean)*100
			if "`g'"=="0" {
				svy: tab `x' barrier
				mat tab[`r',`c'+1]=e(p_Pear)
				mat stars[`r',`c'+1]=(e(p_Pear)<.05)+(e(p_Pear)<.01)
}
			local r=`r'+1
}
}
	local r=3
	local c=`c'+1
}

mat rownames tab=n "Estimate" `cvars1' `ivars1' `cvars2' `ivars2' `cvars3' `ivars3' `cvars4' `ivars4'

frmttable using transport_tables_wave5.rtf, addtable statmat(tab) sdec(0\0\2) ctitles("" "All" "Disadvantaged" "No disadvantage" "P-value") ///
title("Table 2. Characteristics of sample of community dwelling non-drivers by transportation disadvantage") ///
varlabels annotate(stars) asymbol(*,**) note(* P<.05; ** P<.01)

local rn : word count `doc_visit_catvars'
mat tab=J(`rn',4,.)
local c=1
local r=1

foreach x of local doc_visit_catvars {
	foreach y in 0 1 {
		sum `x' if barrier==`y' [aw=anfinw]
		mat tab[`r',`c']=r(mean)*100
		mat tab[`r',`c'+1]=r(sum)
		local c=`c'+2
}
	local c=1
	local r=`r'+1
}

mat rownames tab=`doc_visit_catvars'

frmttable using transport_tables_wave5.rtf, addtable statmat(tab) sdec(2,0,2,0) ///
ctitles("" "No transportation disadvantage" "" "Transportation Disadvantage" \ "" ///
"Percent" "Population estimate" "Percent" "Population estimate")  varlabels ///
title("Table 3. Mode of transport to the doctor by tranpsortation disadvantage among non-drivers")

*drop if proxy

//logit model based on significant factors in table 2
//age race (hispanic) marital status proxy assistive device income
svy: logit barrier agecat2 agecat3  female black hisp educ_hs_ind income_cat0 ///
marital_mp prob_dem adl_impair iadl_impair sr_numconditions1 ///
 device_any

 
outreg, ctitles("" "Odds Ratios") addtable varlabels stats(e_b e_ci p) ///
title("Table 4. Logistic model of predictors of transportation disadvantage") 

svy: logit barrier i.(agecat2 agecat3 female black hisp educ_hs_ind income_cat0 ///
 marital_mp prob_dem adl_impair iadl_impair c.sr_numconditions1 ///
 device_any)
 
margins, dydx(*) post
 
outreg using transport_tables_wave5.rtf, merge addtable varlabels stats(b ci p) ///
title("Table 4. Logistic model of predictors of transportation disadvantage") ///
ctitles("" "AMEs")

